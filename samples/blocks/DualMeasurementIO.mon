/*
 * $Copyright (c) 2019 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
 * This file is licensed under the Apache 2.0 license - see https://www.apache.org/licenses/LICENSE-2.0.
 *
 */
/* ***DISCLAIMER***
 *
 * This is only a sample block and there is no support for this block. This block only supports English. There may be incompatible changes in the future releases without prior notice.
 * To use this block, we recommend that you copy it and change the package name. Software AG accepts no responsibility for bug fixes, maintenance or adding new features to this block.
 */

package apamax.analyticsbuilder.samples;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using apama.analyticsbuilder.Value;
using apama.analyticsbuilder.TimerParams;
using apama.analyticsbuilder.L10N;
using apama.analyticsbuilder.ABConstants;
using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementValue;
using com.apama.exceptions.Exception;

using apama.analyticsbuilder.Promise;
using apama.analyticsbuilder.cumulocity.inventory.InventoryLookup;
using apama.analyticsbuilder.cumulocity.inventory.InputHelper;
using apama.analyticsbuilder.cumulocity.inventory.OutputHelper;
using apama.analyticsbuilder.Partition_Broadcast;

/*
 * This block is equivalent to two normal Measurement input blocks and an Expression block performing a division
 * - it takes two Measurement inputs and returns the value of numerator / denominator.  Using a single block
 * is a bit more efficient.
 *
 * The Measurements may occur in the same Measurement object with multiple fragments, or separate Measurement inputs.
 */


/**
 * Parameters
 * The parameters for the Input Block. 
 */
event DualMeasurementIO_$Parameters{
	/**
	 * Device or Device Group.
	 *
	 * The device or device group from which the measurements have been received.
	 *
	 * The model editor uses the current device or device group name. This is mapped internally to the inventory identifier.
	 * @$semanticType c8y_deviceOrGroupId
	 */
	string deviceId;

	/**
	 * Input Numerator Fragment.
	 *
	 * Name of the input fragment for the numerator.
	 */
	string numeratorFragment;
	constant string $DEFAULT_numeratorFragment := "numerator";
	/**
	 * Input Denominator Fragment.
	 *
	 * Name of the input fragment for the denominator.
	 */
	string denominatorFragment;
	constant string $DEFAULT_denominatorFragment := "denominator";

	/**
	 * Output Ratio Fragment.
	 *
	 * Name of the output fragment for the ratio.
	 */
	string ratioFragment;
	constant string $DEFAULT_ratioFragment := "ratio";
	/**
	 * Output Inverse Ratio Fragment.
	 *
	 * Name of the output fragment for the inverse ratio.
	 */
	string inverseFragment;
	constant string $DEFAULT_inverseFragment := "inverse";

	/** Validate that values for all parameters have been provided. */
	action $validate() {
		BlockBase.throwsOnEmpty(deviceId, "deviceId", self);
	}
}


/** This is a per-input object passed to InputHelper for each of the two inputs that the block has.
*/
event DualMeasurementIO_SubInput {
	BlockBase base; // required by InputHelper; it will use a 'base' member iff there is no '$base' member.
	/**All the devices for which block will be listening. @private */
	sequence<string> devices; // set by reflection in InputHelper
	boolean isGroup; // set by reflection in InputHelper
	boolean isBroadcastDevice; // set by reflection in InputHelper
	string inputId; // set by reflection in InputHelper
}

event DualMeasurementIO_SubOutput {
	BlockBase base; // required by InputHelper; it will use a 'base' member iff there is no '$base' member.
	boolean currentDevice;
	boolean isBroadcastDevice; // set by reflection in OutputHelper
	/** The current deviceId, if currentDevice is false */
	string deviceId;
}


/** Dual measurement state.
 *
 * This is used to store the latest value received from each of the two measurements.
 * (because we don't have wires in the model for each of these, it is up to this block to
 * store the latest value)
 */
event DualMeasurementIO_$State {
	optional<float> latestNumerator;
	optional<float> latestDenominator;
	float lastOutputTime;
}

/**
 * Dual Measurement Input.
 *
 * Receives <tt>Measurement</tt> objects from Cumulocity and outputs the ratio between values on the numerator and denominator inputs.
 *
 * This also generates output to measurements defined by ratio and inverse ratio.
 *
 * @$blockCategory Input
 * @$blockType c8y_Input
 */
event DualMeasurementIO{
	
	BlockBase $base;
	
	/**The parameters for the block. */
	DualMeasurementIO_$Parameters $parameters;
	

	boolean ignoreTimestamp; // always false in simulation mode, else $parameters.ignoreTimestamp

	// latest timestamp assigned to input events - iff ignoreTimestamp set. While this is state, we only use it as a tiebreaker
	// if we receive events at the same model time.  We don't care about it being independent across different partitions,
	// nor persisted across correlator instances.
	float timeValue;
	

	/** SubInput for the Numerator */
	DualMeasurementIO_SubInput numeratorInput;
	/** SubInput for the Denominator */
	DualMeasurementIO_SubInput denominatorInput;
	/** SubOutput for the ratio */
	DualMeasurementIO_SubOutput ratioOutput;
	/** SubOutput for the inverse ratio output */
	DualMeasurementIO_SubOutput inverseOutput;

	string modelId;
	// names of the fragment, series:
	constant string SERIES := "V";
	dictionary<string, any> modelScopeParameters;

	action $validate(dictionary<string, any> $modelScopeParameters) returns Promise {
		modelId := $modelScopeParameters[ABConstants.MODEL_NAME_IDENTIFIER].valueToString();

		numeratorInput.base := $base;
		denominatorInput.base := $base;
		ratioOutput.base := $base;
		inverseOutput.base := $base;
		modelScopeParameters := $modelScopeParameters;

		return Promise.resolve(new any).andThen(declareNumeratorInput); // chain a call to declareNumerator to make it uniform across the inputs and outputs
	}

	action declareNumeratorInput(any _) returns any {
		InputHelper ihelper := InputHelper.forBlock(numeratorInput, modelScopeParameters);
		ihelper.setInput($parameters.deviceId, Measurement.getName(), {"fragment":<any>$parameters.numeratorFragment, "series":SERIES});

		return InventoryLookup.lookup($parameters.deviceId).andThen(ihelper.declareInput).andThen(declareDenominatorInput); // returning a promise from a promise-chained callback will wait on that promise.
	}

	action declareDenominatorInput(any _) returns any {
		InputHelper ihelper := InputHelper.forBlock(denominatorInput, modelScopeParameters);
		ihelper.setInput($parameters.deviceId, Measurement.getName(), {"fragment":<any>$parameters.denominatorFragment, "series":SERIES});

		return InventoryLookup.lookup($parameters.deviceId).andThen(ihelper.declareInput).andThen(declareRatioOutput);
	}

	action declareRatioOutput(any _) returns any {

		OutputHelper helper := OutputHelper.forBlock(ratioOutput);
		helper.setSyncOutput($parameters.deviceId, Measurement.getName(), {"fragment":<any>$parameters.ratioFragment, "series":SERIES});

		return InventoryLookup.lookup($parameters.deviceId).andThen(helper.declareOutput).andThen(declareInverseOutput);
	}

	action declareInverseOutput(any _) returns any {

		OutputHelper helper := OutputHelper.forBlock(inverseOutput);
		helper.setSyncOutput($parameters.deviceId, Measurement.getName(), {"fragment":<any>$parameters.inverseFragment, "series":SERIES});

		return InventoryLookup.lookup($parameters.deviceId).andThen(helper.declareOutput);
	}


	action throwNoDevices(string nameOrId) {
		throw L10N.getLocalizedException("blk_apamax.analyticskit.samples.DualMeasurementIO_no_devices", [<any> nameOrId]);
	}

	/**
	 * Method starts listening for the events from Cumulocity 
	 * and prepares memory store. 
	 */
	action $init() {
		string id;
		for id in numeratorInput.devices {  // will be the same for both inputs
			on all Measurement(source = id) as msmnt {
				// may be both together or separately...
				if hasFrag(msmnt, $parameters.numeratorFragment) or
				   hasFrag(msmnt, $parameters.denominatorFragment) {
					extractMeasurement(msmnt);
				}
			}
		}
	}

	/** Helper for checking if a fragment exists (with a SERIES value below it) */
	action hasFrag(Measurement m, string fragName) returns boolean {
		return m.measurements.hasKey(fragName) and m.measurements[fragName].hasKey(SERIES);
	}

	/**
	 * Extracts the measurement value from event if it is not too old 
	 * and creates the timer according to the timestamp of the event.
	 * @param measurement The incoming Measurement event from Cumulocity.
	 * @private
	 */
	action extractMeasurement(Measurement measurement) {
		// this param indicates it was sent to Cumulocity from Apama - in which case we ignore it; for model-to-model communications, the CreateMeasurement block routes the event, and we process that immediately.  The measurement will also go to Cumulocity and come back, but that may come 'too late'.
		if not (measurement.params.hasKey(ABConstants.MODEL_NAME_IDENTIFIER)) { 
			try {
				if measurement.time  < $base.getModelTime()  {
					$base.droppedEvent(measurement, measurement.time);
					return;
				}

				float timerDelay;
				timerDelay := measurement.time;

				DualMeasurementIO_SubInput subInput;
				if hasFrag(measurement, $parameters.numeratorFragment) {
					subInput := numeratorInput;
				} else {
					subInput := denominatorInput;
				}


				TimerParams tp := TimerParams.absolute(timerDelay).withPayload(measurement).withInputId(subInput.inputId);
				if(subInput.isGroup) {
					tp := tp.withPartition(measurement.source);
				}
				else if(subInput.isBroadcastDevice) {
					tp := tp.withPartition(Partition_Broadcast(measurement.source));
				}
				any discard := $base.createTimerWith(tp);
			} catch (Exception e) {
				log $base.getModelTime().toString()+": Dropping event:"+measurement.toString()+", exception:"+e.toString() at DEBUG;
				$base.droppedEvent(measurement, measurement.time);
			}
		}
	}

	/**
	 * Sets output on the current activation.
	 * @param $activation The current activation.
	 * @param value value to be put on the wire.
	 */
	action $timerTriggered(Activation $activation, any $payload, DualMeasurementIO_$State $blockState) {
		Measurement mInput := <Measurement> $payload;
		if hasFrag(mInput, $parameters.numeratorFragment) {
			$blockState.latestNumerator := mInput.measurements[$parameters.numeratorFragment][SERIES].value;
		}
		if hasFrag(mInput, $parameters.denominatorFragment) {
			$blockState.latestDenominator := mInput.measurements[$parameters.denominatorFragment][SERIES].value;
		}
		// note that two different measurements may occur at the same time. For outputs from a block, calling $setOutput 
		// multiple times from timers firing at the same time will only use the latest value
		ifpresent $blockState.latestNumerator as num, $blockState.latestDenominator as den {
			$setOutput_ratio($activation, num/ den);
		}

		// because two measurements may occur at the same time, we need to wait for all timers to fire; the on wait(0.0) achieves this
		float modelTime := $base.getModelTime();
		on wait(0.0) {
			ifpresent $blockState.latestNumerator as num, $blockState.latestDenominator as den {
				// only create a single measurement output for each device for 
				if $blockState.lastOutputTime < modelTime {
					sendMeasurement(mInput.source, modelTime, $parameters.ratioFragment, num / den);
					sendMeasurement(mInput.source, modelTime, $parameters.inverseFragment, den / num);
					$blockState.lastOutputTime := modelTime;
				}
			}
		}
	}

	action sendMeasurement(string source, float time, string fragment, float value) {
		Measurement m := new Measurement;
		m.source := source;
		m.type := fragment;
		m.time := time;
		m.measurements[fragment] := {SERIES: MeasurementValue(value, "", new dictionary<string, any>)};
		route m;
		m.params[ABConstants.MODEL_NAME_IDENTIFIER] := modelId;
		send m to m.CREATE_CHANNEL;
	}

	/**
	 * Ratio.
	 *
	 * The numerator value divided by denominator.
	 */
	action<Activation,float> $setOutput_ratio;
}
