<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../../../" display="apama.analyticsbuilder.cumulocity.inventory" name="apama.analyticsbuilder.cumulocity.inventory"><Type category="Event" name="C8yBlockOutputInfo" private="true"><Description><![CDATA[Package c8y output info for declaring block output stream.]]></Description><Summary><![CDATA[Package c8y output info for declaring block output stream.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="currentDevice" private="true" type="boolean"><Description><![CDATA[Is trigger device.]]></Description><Summary><![CDATA[Is trigger device.]]></Summary><TypeParameters/></Member><Member name="deviceId" private="true" type="string"><Description><![CDATA[The device ID is not a trigger device.]]></Description><Summary><![CDATA[The device ID is not a trigger device.]]></Summary><TypeParameters/></Member><Member name="isBroadcast" private="true" type="boolean"><Description><![CDATA[Is it a braodcast device.]]></Description><Summary><![CDATA[Is it a braodcast device.]]></Summary><TypeParameters/></Member><Member name="isGroup" private="true" type="boolean"><Description><![CDATA[Is it a Group device.]]></Description><Summary><![CDATA[Is it a Group device.]]></Summary><TypeParameters/></Member><Member name="isAsset" private="true" type="boolean"><Description><![CDATA[Is it a Asset device.]]></Description><Summary><![CDATA[Is it a Asset device.]]></Summary><TypeParameters/></Member><Member name="partition" private="true" type="any"><Description><![CDATA[The partition for the output stream.]]></Description><Summary><![CDATA[The partition for the output stream.]]></Summary><TypeParameters/></Member><Action name="create" private="true" sortKey="static-0-create" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity.inventory" type="C8yBlockOutputInfo"/><Parameters><Parameter name="device" type="any"/><Parameter name="lookupResult" package="apama.analyticsbuilder.cumulocity.inventory" type="InventoryLookupResult"/><Parameter name="bbase" package="apama.analyticsbuilder" type="BlockBase"/></Parameters></Action></Type><Type category="Event" name="FilterLookup" private="true"><Description><![CDATA[Library event for handling query-language based lookups of the C8Y inventory.]]></Description><Summary><![CDATA[Library event for handling query-language based lookups of the C8Y inventory.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="filterString" private="true" type="string"><TypeParameters/></Member><Member name="lookupResult" package="apama.analyticsbuilder.cumulocity.inventory" private="true" type="InventoryLookupResult"><TypeParameters/></Member><Member name="currentTenant" private="true" type="com.apama.cumulocity.TenantDetails"><TypeParameters/></Member><Action name="init" private="true" sortKey="static-0-init" staticNature="static "><Description><![CDATA[Initialise the FilterLookup for the provided tenant.]]></Description><Summary><![CDATA[Initialise the FilterLookup for the provided tenant.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity.inventory" type="FilterLookup"/><Parameters><Parameter name="tenant" type="com.apama.cumulocity.TenantDetails"/></Parameters></Action><Action name="promiseWrapper" private="true" sortKey="static-1-promiseWrapper" staticNature=""><Description><![CDATA[Does the Promise handling for the asynchronous inventory query, failing the promise if no devices in the group can be found.]]></Description><Summary><![CDATA[Does the Promise handling for the asynchronous inventory query, failing the promise if no devices in the group can be found.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="done" type="action"><Parameters><Parameter type="any"/></Parameters></Parameter><Parameter name="fail" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters></Action><Action name="trySmartGroup" private="true" sortKey="static-1-trySmartGroup" staticNature=""><Description><![CDATA[Given an InventoryLookupResult where the device looked up is a smart group, adds the contents of that group to the result, Returning the InventoryLookupResult in a Promise. Malformed filters strings or blank filter strings are an error. If it's not a smart group, this action is just a no-op pass-through.]]></Description><Summary><![CDATA[Given an InventoryLookupResult where the device looked up is a smart group, adds the contents of that group to the result, Returning the InventoryLookupResult in a Promise. Malformed filters strings or blank filter strings are an error. If it's not a smart group, this action is just a no-op pass-through.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="lookupResult_" type="any"/></Parameters></Action></Type><Type category="Event" name="InputHelper" private="true"><Description/><Summary/><Deprecated><Description><![CDATA[This helper event has been deprecated, use the CumulocityInputParams and CumulocityInputHandler events instead.]]></Description><Summary><![CDATA[This helper event has been deprecated, use the CumulocityInputParams and CumulocityInputHandler events instead.]]></Summary></Deprecated><TypeParameters/><See reference="CumulocityInputParams"><Description><![CDATA[To declare an input block.]]></Description></See><See reference="CumulocityInputHandler"><Description><![CDATA[To schedule an input event for processing.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="declareInput" private="true" sortKey="static-1-declareInput" staticNature=""><Description/><Summary/><Deprecated><Description><![CDATA[This action has been deprecated, use the apama.analyticsbuilder.cumulocity.CumulocityInputParams.declare action instead.]]></Description><Summary><![CDATA[This action has been deprecated, use the apama.analyticsbuilder.cumulocity.CumulocityInputParams.declare action instead.]]></Summary></Deprecated><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="a_lookupResult" type="any"/></Parameters></Action><Action name="forBlock" private="true" sortKey="static-0-forBlock" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity.inventory" type="InputHelper"/><Parameters><Parameter name="block" type="any"/><Parameter name="modelScopeParameters" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters></Parameter></Parameters></Action><Action name="setInput" private="true" sortKey="static-1-setInput" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="deviceId" type="string"/><Parameter name="evtType" type="string"/><Parameter name="evtStream" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters></Parameter></Parameters></Action></Type><Type category="Event" name="InventoryLookup"><Description><![CDATA[An API for looking up groups and devices in the inventory.

 This is typically used as so: <pre>
	InventoryLookup.lookup(<tt>deviceId</tt>, <tt>currentTenant</tt>).andThen(callback);
	
	action callback(any lookupResult){
		InventoryLookupResult lookupResult := <tt> &lt InventoryLookupResult &gt </tt>lookupResult;
	}
</pre>]]></Description><Summary><![CDATA[An API for looking up groups and devices in the inventory.]]></Summary><TypeParameters/><See package="apama.analyticsbuilder.cumulocity.inventory" type="InventoryLookupResult"><Description><![CDATA[for more details.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="deviceId" private="true" type="string"><Description><![CDATA[Device Id that is specified in the block.]]></Description><Summary><![CDATA[Device Id that is specified in the block.]]></Summary><TypeParameters/></Member><Member name="tenant" type="com.apama.cumulocity.TenantDetails"><Description><![CDATA[current tenant .]]></Description><Summary><![CDATA[current tenant .]]></Summary><TypeParameters/></Member><Action name="lookup" sortKey="static-0-lookup" staticNature="static "><Description><![CDATA[Inventory lookup for the device.]]></Description><Summary><![CDATA[Inventory lookup for the device.]]></Summary><TypeParameters/><See reference="InventoryLookupResult()"><Description><![CDATA[see this event for more details.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"><Description><![CDATA[A <tt>Promise</tt> lookup result, which could be an <tt>InventoryLookupResult</tt>]]></Description></Returns><Parameters><Parameter name="deviceId" type="any"><Description><![CDATA[The device or group identifier.]]></Description></Parameter><Parameter name="currentTenant" type="com.apama.cumulocity.TenantDetails"/></Parameters></Action><Action name="promiseWrapper" private="true" sortKey="static-1-promiseWrapper" staticNature=""><Description><![CDATA[Sends inventory lookup request to the service monitor, get called from promise.]]></Description><Summary><![CDATA[Sends inventory lookup request to the service monitor, get called from promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="done" type="action"><Parameters><Parameter type="any"/></Parameters></Parameter><Parameter name="fail" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters></Action><Action name="unsubThrow" private="true" sortKey="static-1-unsubThrow" staticNature=""><Description><![CDATA[Unsubscribe the channel.]]></Description><Summary><![CDATA[Unsubscribe the channel.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="e" type="com.apama.exceptions.Exception"/></Parameters></Action><Action name="unsubscribe" private="true" sortKey="static-1-unsubscribe" staticNature=""><Description><![CDATA[Unsubscribe the channel.]]></Description><Summary><![CDATA[Unsubscribe the channel.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="x" type="any"/></Parameters></Action></Type><Type category="Event" name="InventoryLookupRequest" private="true"><Description><![CDATA[Request to service monitor to lookup in the inventory.]]></Description><Summary><![CDATA[Request to service monitor to lookup in the inventory.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="reqId" private="true" type="integer"><TypeParameters/></Member><Member name="deviceId" private="true" type="string"><TypeParameters/></Member><Member constant="true" name="CHANNEL" private="true" type="string" typeValue="&quot;PAB_Device_Lookup_Request&quot;"><TypeParameters/></Member></Type><Type category="Event" name="InventoryLookupResponse" private="true"><Description><![CDATA[Response of lookup inventory from service monitor.]]></Description><Summary><![CDATA[Response of lookup inventory from service monitor.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="reqId" private="true" type="integer"><TypeParameters/></Member><Member name="result" package="apama.analyticsbuilder.cumulocity.inventory" private="true" type="InventoryLookupResult"><TypeParameters/></Member><Member name="exception" private="true" type="optional"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><TypeParameters/></Member><Member constant="true" name="CHANNEL" private="true" type="string" typeValue="&quot;PAB_Device_Lookup_Response&quot;"><TypeParameters/></Member></Type><Type category="Event" name="InventoryLookupResult"><Description><![CDATA[An event holding the result of an inventory lookup. This event is the result of an inventory lookup for the device using the InventoryLookup event. This is typically used as so: <pre>
	  InventoryLookup.lookup(<tt> deviceId </tt>, <tt>currentTenant</tt>).andThen(callback);
	
	  action callback(any lookupResult){
		InventoryLookupResult lookupResult := </tt> &lt InventoryLookupResult &gt </tt> lookupResult;
	  }
    </pre>]]></Description><Summary><![CDATA[An event holding the result of an inventory lookup. This event is the result of an inventory lookup for the device using the InventoryLookup event. This is typically used as so: <pre>]]></Summary><TypeParameters/><See package="apama.analyticsbuilder.cumulocity.inventory" type="InventoryLookup"><Description><![CDATA[for more information.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="isGroup" type="boolean"><Description><![CDATA[True if specified id is a group.]]></Description><Summary><![CDATA[True if specified id is a group.]]></Summary><TypeParameters/></Member><Member name="isAsset" type="boolean"><Description><![CDATA[True if specified id is an asset.]]></Description><Summary><![CDATA[True if specified id is an asset.]]></Summary><TypeParameters/></Member><Member name="isBroadcastDevice" type="boolean"><Description><![CDATA[True if specified id is a broadcast device.]]></Description><Summary><![CDATA[True if specified id is a broadcast device.]]></Summary><TypeParameters/></Member><Member name="nameOrId" type="string"><Description><![CDATA[Name of the root device or group if present else the ID. Used in error messages.]]></Description><Summary><![CDATA[Name of the root device or group if present else the ID. Used in error messages.]]></Summary><TypeParameters/></Member><Member name="allDevices" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="com.apama.cumulocity.ManagedObject"/></Parameters><Description><![CDATA[Holds all the devices in the specified group if a group, or single device.]]></Description><Summary><![CDATA[Holds all the devices in the specified group if a group, or single device.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="LookupState" private="true"><Description><![CDATA[Stores state used during a group lookup.]]></Description><Summary><![CDATA[Stores state used during a group lookup.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="visited" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="boolean"/></Parameters><Description><![CDATA[A set for holding ids that we have visited already]]></Description><Summary><![CDATA[A set for holding ids that we have visited already]]></Summary><TypeParameters/></Member><Member name="pending" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="boolean"/></Parameters><Description><![CDATA[A set for holding inventory ids which we have not walked yet]]></Description><Summary><![CDATA[A set for holding inventory ids which we have not walked yet]]></Summary><TypeParameters/></Member><Member name="deviceId" private="true" type="string"><Description><![CDATA[root identifier which is currently being looked up.]]></Description><Summary><![CDATA[root identifier which is currently being looked up.]]></Summary><TypeParameters/></Member><Member name="response" package="apama.analyticsbuilder.cumulocity.inventory" private="true" type="InventoryLookupResponse"><Description><![CDATA[Response for the lookup.]]></Description><Summary><![CDATA[Response for the lookup.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="OutputHelper" private="true"><Description/><Summary/><Deprecated><Description><![CDATA[This helper event has been deprecated, use the CumulocityOutputParams and CumulocityOutputHandler events instead.]]></Description><Summary><![CDATA[This helper event has been deprecated, use the CumulocityOutputParams and CumulocityOutputHandler events instead.]]></Summary></Deprecated><TypeParameters/><See reference="CumulocityOutputParams"><Description><![CDATA[To declare an output block.]]></Description></See><See reference="CumulocityOutputHandler"><Description><![CDATA[To send an output event.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="declareOutput" private="true" sortKey="static-1-declareOutput" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="a_lookupResult" type="any"/></Parameters></Action><Action name="forBlock" private="true" sortKey="static-0-forBlock" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity.inventory" type="OutputHelper"/><Parameters><Parameter name="block" type="any"/></Parameters></Action><Action name="setAsyncOutput" private="true" sortKey="static-1-setAsyncOutput" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="deviceId" type="any"/><Parameter name="evtType" type="string"/></Parameters></Action><Action name="setSyncOutput" private="true" sortKey="static-1-setSyncOutput" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="deviceId" type="any"/><Parameter name="evtType" type="string"/><Parameter name="evtStream" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters></Parameter></Parameters></Action></Type><Type category="Event" name="Update_MO" private="true"><Description><![CDATA[Wrapper for ManagedObject; indicates this is a (potentially) partial update.]]></Description><Summary><![CDATA[Wrapper for ManagedObject; indicates this is a (potentially) partial update.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="mo" private="true" type="com.apama.cumulocity.ManagedObject"><TypeParameters/></Member></Type><Type category="Monitor" name="InventoryLookupManager" private="true"><Description><![CDATA[Monitor is the bridge between Analytics Builder and c8y inventory and caches the reponses.]]></Description><Summary><![CDATA[Monitor is the bridge between Analytics Builder and c8y inventory and caches the reponses.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/></Type></Package><Package depth="../../../" display="apama.analyticsbuilder.cumulocity" name="apama.analyticsbuilder.cumulocity"><Type category="Event" name="BlockBaseValidator"><Description><![CDATA[Verify if the given block contains the validate Base event or not.]]></Description><Summary><![CDATA[Verify if the given block contains the validate Base event or not.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="getBlockBase" private="true" sortKey="static-0-getBlockBase" staticNature="static "><Description><![CDATA[check block contains $base field.]]></Description><Summary><![CDATA[check block contains $base field.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="BlockBase"/><Parameters><Parameter name="block" type="any"/></Parameters></Action></Type><Type category="Event" name="CumulocityInputHandler"><Description><![CDATA[A handler that is used for scheduling input events for processing at the earliest possible time or at the provided timestamp.

 It provides information about the source devices, for example, if the device is a device group or a broadcast device.]]></Description><Summary><![CDATA[A handler that is used for scheduling input events for processing at the earliest possible time or at the provided timestamp.]]></Summary><TypeParameters/><See package="apama.analyticsbuilder.cumulocity" type="CumulocityInputParams"><Description><![CDATA[To declare an input block and create an input handler.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens><Reference type="any"/></Listens><Spawns/><Member name="isGroup" private="true" type="boolean"><Description><![CDATA[See isDeviceGroup.]]></Description><Summary><![CDATA[See isDeviceGroup.]]></Summary><TypeParameters/></Member><Member name="isBroadcast" private="true" type="boolean"><Description><![CDATA[True if the specified source device id is a broadcast device.]]></Description><Summary><![CDATA[True if the specified source device id is a broadcast device.]]></Summary><TypeParameters/></Member><Member name="genericHandler" package="apama.analyticsbuilder" private="true" type="InputHandler"><Description><![CDATA[base InputHandler to call schedule or scheduleNow]]></Description><Summary><![CDATA[base InputHandler to call schedule or scheduleNow]]></Summary><TypeParameters/></Member><Member name="devices" private="true" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[All the devices .]]></Description><Summary><![CDATA[All the devices .]]></Summary><TypeParameters/></Member><Member name="_emptyFloat" private="true" type="optional"><Parameters><Parameter type="float"/></Parameters><Description><![CDATA[empty float value .]]></Description><Summary><![CDATA[empty float value .]]></Summary><TypeParameters/></Member><Member name="deviceFieldName" private="true" type="string"><Description><![CDATA[Name of the field which contains the the source device - source or id for predefined event types.]]></Description><Summary><![CDATA[Name of the field which contains the the source device - source or id for predefined event types.]]></Summary><TypeParameters/></Member><Member name="allInputs" type="boolean"><Description><![CDATA[Listen to every device or any other input source]]></Description><Summary><![CDATA[Listen to every device or any other input source]]></Summary><TypeParameters/></Member><Member name="tenant" type="com.apama.cumulocity.TenantDetails"><Description><![CDATA[Current tenant.]]></Description><Summary><![CDATA[Current tenant.]]></Summary><TypeParameters/></Member><Action name="createListeners" sortKey="static-1-createListeners" staticNature=""><Description><![CDATA[Creates listeners for the events]]></Description><Summary><![CDATA[Creates listeners for the events]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens><Reference type="any"/></Listens><Spawns/><Parameters><Parameter name="eventName" type="string"><Description><![CDATA[Name of the event to listen for.]]></Description></Parameter><Parameter name="values" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The values to be matched in the event listners.]]></Description></Parameter><Parameter name="eventReceivedCb" type="action"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[The callback action.]]></Description></Parameter></Parameters></Action><Action name="getAllDevices" sortKey="static-1-getAllDevices" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[A sequence of all device identifiers handled by this object. Could be a single id, or the id of every device in a group, smart group etc.]]></Description></Returns></Action><Action name="getChannel" sortKey="static-1-getChannel" staticNature=""><Description><![CDATA[Get the current tenant specific channel.]]></Description><Summary><![CDATA[Get the current tenant specific channel.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="channel" type="string"/></Parameters></Action><Action name="getDevices" sortKey="static-1-getDevices" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[All the devices handled by the current worker (a subset of getAllDevices).]]></Description></Returns></Action><Action name="isBroadcastDevice" sortKey="static-1-isBroadcastDevice" staticNature=""><Description><![CDATA[Check if the source device identifier is a broadcast device.]]></Description><Summary><![CDATA[Check if the source device identifier is a broadcast device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if the source device identifier is a broadcast device.]]></Description></Returns></Action><Action name="isDeviceGroup" sortKey="static-1-isDeviceGroup" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if this is handling a group of devices, for example, those referenced or contained in a device group or smart group.]]></Description></Returns></Action><Action name="partitionForTimer" sortKey="static-1-partitionForTimer" staticNature=""><Description><![CDATA[Return the partition which should be used when manually creating a timer for input events.

 The <tt>schedule</tt> and <tt>scheduleNow</tt> actions should be preferred over manually creating timers.]]></Description><Summary><![CDATA[Return the partition which should be used when manually creating a timer for input events.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[The partition to use when creating a timer.]]></Description></Returns><Parameters><Parameter name="device" type="string"><Description><![CDATA[The source device ID for which partition is required.]]></Description></Parameter></Parameters></Action><Action name="schedule" sortKey="static-1-schedule" staticNature=""><Description><![CDATA[Schedule the input event to be processed at the specified time. If no time is specified then the input event is scheduled to be processed as soon as possible.

 This creates a timer for the specified timestamp or the earliest possible time. When the timer is triggered, the <tt>$timerTriggered</tt> action of the block is called and the <tt>inputEvent</tt> is passed as the payload.

 It also determines the correct partition for the input event based on the properties of the source device specified when declaring the input block.]]></Description><Summary><![CDATA[Schedule the input event to be processed at the specified time. If no time is specified then the input event is scheduled to be processed as soon as possible.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerHandle"><Description><![CDATA[The handle to the timer created.]]></Description></Returns><Parameters><Parameter name="inputEvent" type="any"><Description><![CDATA[The input event. It should be of the same type as specified in the <tt>CumulocityInputParams</tt>.]]></Description></Parameter><Parameter name="timestamp" type="optional"><Parameters><Parameter type="float"/></Parameters><Description><![CDATA[The source timestamp of the event. Pass an empty value if the source timestamp is not to be used or not available.]]></Description></Parameter></Parameters></Action><Action name="scheduleNow" sortKey="static-1-scheduleNow" staticNature=""><Description><![CDATA[Schedule the input event to be processed as soon as possible.

 This creates a timer for the earliest possible time. When the timer is triggered, the <tt>$timerTriggered</tt> action of the block is called and the <tt>inputEvent</tt> is passed as the payload.

 It also determines the correct partition for the input event based on the properties of the source device specified when declaring the input block.]]></Description><Summary><![CDATA[Schedule the input event to be processed as soon as possible.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerHandle"><Description><![CDATA[The handle to the timer created.]]></Description></Returns><Parameters><Parameter name="inputEvent" type="any"><Description><![CDATA[The input event. It should be of the same type as specified in the <tt>CumulocityInputParams</tt>.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="CumulocityInputParams"><Description><![CDATA[Parameters for declaring events consumed by an input block.

 The combination of event type, field values, and device identifies the input stream.

 This is typically used as following to declare the input stream and save the input handler created: <pre>
CumulocityInputHandler inputHandler;

action $validate() returns Promise {
	CumulocityInputParams params := CumulocityInputParams.create($parameters.deviceId, self, Event.getName()).withFields({"type":<any>$parameters.type});
	return c8yInputParams.declare(inputHandlerCreated);
}
action saveHandler(CumulocityInputHandler handler) {
	self.inputHandler := handler;
}
</pre> The <tt>declare</tt> action performs an inventory lookup for the provided device and then declares the input stream being consumed using the <tt>BlockBase.consumesInput</tt> action.]]></Description><Summary><![CDATA[Parameters for declaring events consumed by an input block.]]></Summary><TypeParameters/><See package="apama.analyticsbuilder.cumulocity" type="CumulocityInputHandler"><Description><![CDATA[To schedule input events for processing.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="block" private="true" type="any"><Description><![CDATA[The block object.]]></Description><Summary><![CDATA[The block object.]]></Summary><TypeParameters/></Member><Member name="deviceId" private="true" type="string"><Description><![CDATA[The deviceId parameter.]]></Description><Summary><![CDATA[The deviceId parameter.]]></Summary><TypeParameters/></Member><Member name="eventType" private="true" type="string"><Description><![CDATA[The event type the block is listening for (Measurement, Event, etc - fully qualified name).]]></Description><Summary><![CDATA[The event type the block is listening for (Measurement, Event, etc - fully qualified name).]]></Summary><TypeParameters/></Member><Member name="isSync" type="boolean"><Description><![CDATA[If false, then the input never triggers evaluation of a model.]]></Description><Summary><![CDATA[If false, then the input never triggers evaluation of a model.]]></Summary><TypeParameters/></Member><Member name="fields" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The fields that block is listening for (doesnot have to match the exact field names but should be same for output blocks as well).]]></Description><Summary><![CDATA[The fields that block is listening for (doesnot have to match the exact field names but should be same for output blocks as well).]]></Summary><TypeParameters/></Member><Member name="handlerCreatedCallback" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder.cumulocity" type="CumulocityInputHandler"/></Parameters><Description><![CDATA[The reference to an action for handleCreated callback.]]></Description><Summary><![CDATA[The reference to an action for handleCreated callback.]]></Summary><TypeParameters/></Member><Member name="inventoryResultCallback" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder.cumulocity.inventory" type="InventoryLookupResult"/></Parameters><Description><![CDATA[The reference to an action for lookupresults callback.]]></Description><Summary><![CDATA[The reference to an action for lookupresults callback.]]></Summary><TypeParameters/></Member><Member name="selectedOnly" private="true" type="boolean"><Description><![CDATA[Receive from the selected source only (used for receiving from an asset and not its child devices).]]></Description><Summary><![CDATA[Receive from the selected source only (used for receiving from an asset and not its child devices).]]></Summary><TypeParameters/></Member><Member name="allInputs" private="true" type="boolean"><Description><![CDATA[Receive from all input sources.]]></Description><Summary><![CDATA[Receive from all input sources.]]></Summary><TypeParameters/></Member><Action name="create" sortKey="static-0-create" staticNature="static "><Description><![CDATA[Create a new <tt>CumulocityInputParams</tt> for synchronous inputs that can handle a specified event type and device.]]></Description><Summary><![CDATA[Create a new <tt>CumulocityInputParams</tt> for synchronous inputs that can handle a specified event type and device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity" type="CumulocityInputParams"><Description><![CDATA[A new <tt>CumulocityInputParams</tt>.]]></Description></Returns><Parameters><Parameter name="deviceId" type="any"><Description><![CDATA[The source device or device group identifier.]]></Description></Parameter><Parameter name="block" type="any"><Description><![CDATA[The block object.]]></Description></Parameter><Parameter name="eventType" type="string"><Description><![CDATA[The fully qualified name of the event that the block listens for. The listeners created for consuming input events should be of this type.]]></Description></Parameter></Parameters></Action><Action name="createHandler" private="true" sortKey="static-1-createHandler" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="a_lookupResult" type="any"/></Parameters></Action><Action name="declare" sortKey="static-1-declare" staticNature=""><Description><![CDATA[Declare the input stream being consumed by the block.

 This is an asynchronous operation that performs an inventory lookup for the source device or device group. It will call the <tt>handlerCreated</tt> action after the lookup is done.

 It will call <tt>BlockBase.consumesInput()</tt> after the lookup to declare that the block is an input block.

 This must be called during the <tt>$validate</tt> action, not afterward. Either the promise returned by this action or another promised chained with it must be returned from the <tt>$validate</tt> action.]]></Description><Summary><![CDATA[Declare the input stream being consumed by the block.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="handlerCreated" type="action"><Parameters><Parameter package="apama.analyticsbuilder.cumulocity" type="CumulocityInputHandler"/></Parameters><Description><![CDATA[The Callback action to save the input handler created.]]></Description></Parameter></Parameters></Action><Action name="declareAsync" sortKey="static-1-declareAsync" staticNature=""><Description><![CDATA[Declare the async input stream being consumed by the block.

 This is an asynchronous operation that performs an inventory lookup for the source device or device group. It will call <tt>BlockBase.consumesInput()</tt> after the lookup to declare that the block is an input block.

 This must be called during the <tt>$validate</tt> action, not afterward. Either the promise returned by this action or another promised chained with it must be returned from the <tt>$validate</tt> action.]]></Description><Summary><![CDATA[Declare the async input stream being consumed by the block.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/></Action><Action name="forAsyncEventType" sortKey="static-0-forAsyncEventType" staticNature="static "><Description><![CDATA[Create a new <tt>CumulocityInputParams</tt> for asynchronous inputs that can handle a specified event type and device.]]></Description><Summary><![CDATA[Create a new <tt>CumulocityInputParams</tt> for asynchronous inputs that can handle a specified event type and device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity" type="CumulocityInputParams"><Description><![CDATA[A new <tt>CumulocityInputParams</tt>.]]></Description></Returns><Parameters><Parameter name="deviceId" type="any"><Description><![CDATA[The source device or device group identifier.]]></Description></Parameter><Parameter name="block" type="any"><Description><![CDATA[The block object.]]></Description></Parameter><Parameter name="eventType" type="string"><Description><![CDATA[The fully qualified name of the event that the block listens for. The listeners created for consuming input events should be of this type.]]></Description></Parameter></Parameters></Action><Action name="validateAndSetSource" private="true" sortKey="static-1-validateAndSetSource" staticNature=""><Description><![CDATA[Validate the source value and extract the device ID to use from it.]]></Description><Summary><![CDATA[Validate the source value and extract the device ID to use from it.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="source" type="any"/></Parameters></Action><Action name="withFields" sortKey="static-1-withFields" staticNature=""><Description><![CDATA[Specify the fields that the block listens for.]]></Description><Summary><![CDATA[Specify the fields that the block listens for.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity" type="CumulocityInputParams"><Description><![CDATA[The <tt>CumulocityInputParams</tt> with fields value.]]></Description></Returns><Parameters><Parameter name="fields" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values.]]></Description></Parameter></Parameters></Action><Action name="withLookupResultHandler" private="true" sortKey="static-1-withLookupResultHandler" staticNature=""><Description><![CDATA[Specify the callback to call with the inventory lookup results once lookup is completed.]]></Description><Summary><![CDATA[Specify the callback to call with the inventory lookup results once lookup is completed.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity" type="CumulocityInputParams"><Description><![CDATA[The <tt>CumulocityInputParams</tt> with inventory look result callback action.]]></Description></Returns><Parameters><Parameter name="inventoryResultsCb" type="action"><Parameters><Parameter package="apama.analyticsbuilder.cumulocity.inventory" type="InventoryLookupResult"/></Parameters><Description><![CDATA[The callback action.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="CumulocityOutputHandler"><Description><![CDATA[A handler that is used for sending output events to models.

 It provides information about the source device identifier, for example, if the device is a broadcast device or the current device.

 It is typically used to get the target device for the output and then send output. For example: <pre>
ifpresent outputHandler.deviceToOutput($activation) as device {
	Event evt := Event("", $parameters.eventType, device, $activation.timestamp, text,  new dictionary<string,any>);
	outputHandler.sendOutput(evt, Event.CHANNEL, $activation);
}
</pre>]]></Description><Summary><![CDATA[A handler that is used for sending output events to models.]]></Summary><TypeParameters/><See package="apama.analyticsbuilder.cumulocity" type="CumulocityOutputParams"><Description><![CDATA[To declare an output block and create an output handler.]]></Description></See><Routes><Reference type="any"><Description><![CDATA[The output event if it is synchronous.]]></Description></Reference></Routes><Emits/><Enqueues/><Sends><Reference type="any"><Description><![CDATA[The output event to the output channel.]]></Description></Reference></Sends><Listens/><Spawns/><Member name="currentDevice" private="true" type="boolean"><Description><![CDATA[Sends to the 'current' device from the activation's partition.]]></Description><Summary><![CDATA[Sends to the 'current' device from the activation's partition.]]></Summary><TypeParameters/></Member><Member name="isBroadcast" private="true" type="boolean"><Description><![CDATA[Is output device a broadcast device?]]></Description><Summary><![CDATA[Is output device a broadcast device?]]></Summary><TypeParameters/></Member><Member name="deviceId" private="true" type="string"><Description><![CDATA[The current deviceId, if currentDevice is false.]]></Description><Summary><![CDATA[The current deviceId, if currentDevice is false.]]></Summary><TypeParameters/></Member><Member name="isSync" private="true" type="boolean"><Description><![CDATA[Is synchronous output or not.]]></Description><Summary><![CDATA[Is synchronous output or not.]]></Summary><TypeParameters/></Member><Member name="bbase" package="apama.analyticsbuilder" private="true" type="BlockBase"><Description><![CDATA[The block base object.]]></Description><Summary><![CDATA[The block base object.]]></Summary><TypeParameters/></Member><Member name="eventType" private="true" type="string"><Description><![CDATA[Type of the event that send out by the block.]]></Description><Summary><![CDATA[Type of the event that send out by the block.]]></Summary><TypeParameters/></Member><Member name="modelName" private="true" type="string"><Description><![CDATA[The name of the model.]]></Description><Summary><![CDATA[The name of the model.]]></Summary><TypeParameters/></Member><Member name="genericHandler" package="apama.analyticsbuilder" private="true" type="OutputHandler"><Description><![CDATA[Reference to generic handler.]]></Description><Summary><![CDATA[Reference to generic handler.]]></Summary><TypeParameters/></Member><Member name="partitioner" package="apama.analyticsbuilder" private="true" type="Partitioner"><Description><![CDATA[The partitioner object to check worker for an asset.]]></Description><Summary><![CDATA[The partitioner object to check worker for an asset.]]></Summary><TypeParameters/></Member><Member name="isTestOrSimulationMode" private="true" type="boolean"><Description><![CDATA[Is it test or simulation mode?.]]></Description><Summary><![CDATA[Is it test or simulation mode?.]]></Summary><TypeParameters/></Member><Action name="deviceToOutput" sortKey="static-1-deviceToOutput" staticNature=""><Description><![CDATA[Get the current device identifier for which the output should be produced.

 If the output device is a trigger device then it returns the device that caused the model execution. It returns an empty value if the output should not be produced for the current activation.]]></Description><Summary><![CDATA[Get the current device identifier for which the output should be produced.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="optional"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[The device identifier for which to produce output, or an empty value if output should not be produced.]]></Description></Returns><Parameters><Parameter name="$activation" package="apama.analyticsbuilder" type="Activation"><Description><![CDATA[The current activation.]]></Description></Parameter></Parameters></Action><Action name="getChannel" sortKey="static-1-getChannel" staticNature=""><Description><![CDATA[get the current tenant specific channel.]]></Description><Summary><![CDATA[get the current tenant specific channel.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="channel" type="string"/></Parameters></Action><Action name="getDevice" sortKey="static-1-getDevice" staticNature=""><Description><![CDATA[Get the target device identifier for which output is to be produced.]]></Description><Summary><![CDATA[Get the target device identifier for which output is to be produced.]]></Summary><TypeParameters/><See action="isTriggerDevice" package="apama.analyticsbuilder.cumulocity" type="CumulocityOutputHandler"><Description><![CDATA[To check if the device is a trigger device.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="optional"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[Empty value if the target device is the trigger device, otherwise the device identifier of the target device.]]></Description></Returns></Action><Action name="getTenantDetails" sortKey="static-1-getTenantDetails" staticNature=""><Description><![CDATA[get the current tenant details.]]></Description><Summary><![CDATA[get the current tenant details.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="com.apama.cumulocity.TenantDetails"/></Action><Action name="isBroadcastDevice" sortKey="static-1-isBroadcastDevice" staticNature=""><Description><![CDATA[Check if the target device identifier is a broadcast device.]]></Description><Summary><![CDATA[Check if the target device identifier is a broadcast device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if the target device identifier is a broadcast device.]]></Description></Returns></Action><Action name="isTriggerDevice" sortKey="static-1-isTriggerDevice" staticNature=""><Description><![CDATA[Check if the target device is a trigger device. If the device is a trigger device, then output will be sent to the device that caused the model execution.]]></Description><Summary><![CDATA[Check if the target device is a trigger device. If the device is a trigger device, then output will be sent to the device that caused the model execution.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[True if target device is a trigger device.]]></Description></Returns></Action><Action name="routeOutput" sortKey="static-1-routeOutput" staticNature=""><Description><![CDATA[Route the output event internally only.

 Normally, blocks would call sendOutput, but if there is a need to send output separately, this will only route the outputEvent (and forward to other worker contexts as needed). This method will also 'tag' the outputEvent.]]></Description><Summary><![CDATA[Route the output event internally only.]]></Summary><TypeParameters/><Routes><Reference type="any"><Description><![CDATA[The output event if it is synchronous.]]></Description></Reference></Routes><Emits/><Enqueues/><Sends><Reference type="any"/></Sends><Listens/><Spawns/><Parameters><Parameter name="outputEvent" type="any"><Description><![CDATA[The output event to send.]]></Description></Parameter><Parameter name="$activation" package="apama.analyticsbuilder" type="Activation"><Description><![CDATA[The current activation.]]></Description></Parameter></Parameters></Action><Action name="sendOutput" sortKey="static-1-sendOutput" staticNature=""><Description><![CDATA[Send the output event to model by sending it to the specified channel.

 If the output is synchronous then it is routed internally for consumption by other models. The output event is also tagged by putting the model name against the apama_analytics_modelName key in the params dictionary of the event. Any input block consuming the same event type must filter out any events that have the same key in the dictionary.]]></Description><Summary><![CDATA[Send the output event to model by sending it to the specified channel.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends><Reference type="any"><Description><![CDATA[The output event to the output channel.]]></Description></Reference></Sends><Listens/><Spawns/><Parameters><Parameter name="outputEvent" type="any"><Description><![CDATA[The output event to send.]]></Description></Parameter><Parameter name="channel" type="string"><Description><![CDATA[The channel on which to send the output event.]]></Description></Parameter><Parameter name="$activation" package="apama.analyticsbuilder" type="Activation"><Description><![CDATA[The current activation.]]></Description></Parameter></Parameters></Action><Action name="tagOutput" sortKey="static-1-tagOutput" staticNature=""><Description><![CDATA[Utility to add tag to the output event]]></Description><Summary><![CDATA[Utility to add tag to the output event]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="paramsField" type="any"/><Parameter name="key" type="string"/><Parameter name="value" type="string"/></Parameters></Action></Type><Type category="Event" name="CumulocityOutputParams"><Description><![CDATA[Parameters for declaring events produced by an output block.

 The combination of event type, field values, and device identifies the output stream.

 This is typically used as following to declare the output stream and then save the output handler created: <pre>
CumulocityOutputHandler outputHandler;

action $validate() returns Promise {
	CumulocityOutputParams params := CumulocityOutputParams.forSyncEventType($parameters.deviceId, self, Event.getName(), fields);
	return params.declare(saveHandler);
}
action saveHandler(CumulocityOutputHandler handler) {
	self.outputHandler := handler;
}
</pre> The declare action performs an inventory lookup for the provided device and then declares the output stream being produced using the <tt>BlockBase.consumesInput</tt> action.]]></Description><Summary><![CDATA[Parameters for declaring events produced by an output block.]]></Summary><TypeParameters/><See package="apama.analyticsbuilder.cumulocity" type="CumulocityOutputHandler"><Description><![CDATA[To send output events.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="eventType" private="true" type="string"><Description><![CDATA[Type of the event that send out by the block.]]></Description><Summary><![CDATA[Type of the event that send out by the block.]]></Summary><TypeParameters/></Member><Member name="fields" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values the block sends that, together with <tt>partitionValue</tt>, identify a stream of events.]]></Description><Summary><![CDATA[The field values the block sends that, together with <tt>partitionValue</tt>, identify a stream of events.]]></Summary><TypeParameters/></Member><Member name="deviceId" private="true" type="any"><Description><![CDATA[Output Destination.]]></Description><Summary><![CDATA[Output Destination.]]></Summary><TypeParameters/></Member><Member name="block" private="true" type="any"><Description><![CDATA[The block object.]]></Description><Summary><![CDATA[The block object.]]></Summary><TypeParameters/></Member><Member name="isSync" private="true" type="boolean"><Description><![CDATA[Whether this output is synchronous or not.]]></Description><Summary><![CDATA[Whether this output is synchronous or not.]]></Summary><TypeParameters/></Member><Member name="handlerCreatedCallback" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder.cumulocity" type="CumulocityOutputHandler"/></Parameters><Description><![CDATA[Callback action to pass the handler object.]]></Description><Summary><![CDATA[Callback action to pass the handler object.]]></Summary><TypeParameters/></Member><Member name="inventoryResultCallback" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder.cumulocity.inventory" type="InventoryLookupResult"/></Parameters><Description><![CDATA[The reference to an action for lookupresults callback.]]></Description><Summary><![CDATA[The reference to an action for lookupresults callback.]]></Summary><TypeParameters/></Member><Member name="selectedOnly" private="true" type="boolean"><Description><![CDATA[If block is configured to send output to the selected device only.]]></Description><Summary><![CDATA[If block is configured to send output to the selected device only.]]></Summary><TypeParameters/></Member><Action name="createHandler" private="true" sortKey="static-1-createHandler" staticNature=""><Description><![CDATA[An action to create handler object. Called when inventory lookup promise is fulfilled.]]></Description><Summary><![CDATA[An action to create handler object. Called when inventory lookup promise is fulfilled.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="a_lookupResult" type="any"/></Parameters></Action><Action name="declare" sortKey="static-1-declare" staticNature=""><Description><![CDATA[Declare the output stream being produced by the block.

 This is an asynchronous operation that performs an inventory lookup for the target device. It will call the <tt>handlerCreated</tt> action after the lookup is done.

 It will call <tt>BlockBase.producesOutput()</tt> after the lookup to declare that the block is an output block.

 This must be called during the <tt>$validate</tt> action, not afterward. Either the promise returned by this action or another promised chained with it must be returned from the <tt>$validate</tt> action.]]></Description><Summary><![CDATA[Declare the output stream being produced by the block.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="handlerCreated" type="action"><Parameters><Parameter package="apama.analyticsbuilder.cumulocity" type="CumulocityOutputHandler"/></Parameters><Description><![CDATA[The Callback action to save the output handler created.]]></Description></Parameter></Parameters></Action><Action name="forAsyncEventType" sortKey="static-0-forAsyncEventType" staticNature="static "><Description><![CDATA[Create a new <tt>CumulocityOutputParams</tt> for asynchronous output events.

 Asynchronous output events are events that do not have source timestamps and can only be consumed by another model in a time-asynchronous manner when they are received back. Examples of asynchronous output events are <tt>Operation</tt> and <tt>ManagedObject</tt>.]]></Description><Summary><![CDATA[Create a new <tt>CumulocityOutputParams</tt> for asynchronous output events.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity" type="CumulocityOutputParams"><Description><![CDATA[A new <tt>CumulocityOutputParams</tt>.]]></Description></Returns><Parameters><Parameter name="deviceId" type="any"><Description><![CDATA[The target device identifier or the Trigger Device.]]></Description></Parameter><Parameter name="block" type="any"><Description><![CDATA[The block object.]]></Description></Parameter><Parameter name="eventTypeName" type="string"><Description><![CDATA[The fully qualified name of the event produced.]]></Description></Parameter></Parameters></Action><Action name="forSyncEventType" sortKey="static-0-forSyncEventType" staticNature="static "><Description><![CDATA[Create a new <tt>CumulocityOutputParams</tt> for synchronous output events.

 Synchronous output events are events that have source timestamps and can be consumed by another model in a time-synchronous manner and can be processed by the model with any other data from the same timestamp. Examples of synchronous output events are <tt>Event</tt> and <tt>Measurement</tt>.

 Synchronous output events are routed internally for consumption by any consumer model before being sent. These output events might be received back at some point in the future. In such cases, the value will already have been processed and so must be ignored. This is achieved by adding a tag to the output event when it is sent. Input blocks should check for the presence of such a tag and ignore an input event if the tag is present. Output events are tagged automatically if <tt>CumulocityOutputHandler</tt> is used for sending output events.]]></Description><Summary><![CDATA[Create a new <tt>CumulocityOutputParams</tt> for synchronous output events.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity" type="CumulocityOutputParams"><Description><![CDATA[A new <tt>CumulocityOutputParams</tt>.]]></Description></Returns><Parameters><Parameter name="deviceId" type="any"><Description><![CDATA[The target device identifier or the Trigger Device.]]></Description></Parameter><Parameter name="block" type="any"><Description><![CDATA[The block object.]]></Description></Parameter><Parameter name="eventTypeName" type="string"><Description><![CDATA[The fully qualified name of the event that block produces. The events sent by the block should be of this type only.]]></Description></Parameter><Parameter name="fields" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values that the block sends.]]></Description></Parameter></Parameters></Action><Action name="tagger" private="true" sortKey="static-0-tagger" staticNature="static "><Description><![CDATA[A tagger action.]]></Description><Summary><![CDATA[A tagger action.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="m" type="any"/></Parameters></Action><Action name="validateAndSetSource" private="true" sortKey="static-1-validateAndSetSource" staticNature=""><Description><![CDATA[Validate the source value and extract the device ID to use from it.]]></Description><Summary><![CDATA[Validate the source value and extract the device ID to use from it.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="source" type="any"/></Parameters></Action><Action name="withLookupResultHandler" private="true" sortKey="static-1-withLookupResultHandler" staticNature=""><Description><![CDATA[Specify the callback to call with the inventory lookup results once lookup is completed.]]></Description><Summary><![CDATA[Specify the callback to call with the inventory lookup results once lookup is completed.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder.cumulocity" type="CumulocityOutputParams"><Description><![CDATA[The <tt>CumulocityInputParams</tt> with inventory look result callback action.]]></Description></Returns><Parameters><Parameter name="inventoryResultsCb" type="action"><Parameters><Parameter package="apama.analyticsbuilder.cumulocity.inventory" type="InventoryLookupResult"/></Parameters><Description><![CDATA[The callback action.]]></Description></Parameter></Parameters></Action></Type></Package><Package depth="../../" display="apama.analyticsbuilder" name="apama.analyticsbuilder"><Type category="Event" name="ABConstants"><Description><![CDATA[Constants for entries in <tt>$modelScopeParameters</tt>.]]></Description><Summary><![CDATA[Constants for entries in <tt>$modelScopeParameters</tt>.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="MODEL_NAME_IDENTIFIER" type="string" typeValue="&quot;apama_analytics_modelName&quot;"><Description><![CDATA[The key for the model name in <tt>$modelScopeParameters</tt>.]]></Description><Summary><![CDATA[The key for the model name in <tt>$modelScopeParameters</tt>.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_IDENTIFIER" type="string" typeValue="&quot;apama_analytics_mode&quot;"><Description><![CDATA[The key for the model mode (<tt>PRODUCTION</tt>, <tt>TEST</tt> or <tt>SIMULATION</tt>) in <tt>$modelScopeParameters</tt>.]]></Description><Summary><![CDATA[The key for the model mode (<tt>PRODUCTION</tt>, <tt>TEST</tt> or <tt>SIMULATION</tt>) in <tt>$modelScopeParameters</tt>.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_PROPERTIES_IDENTIFIER" type="string" typeValue="&quot;apama_analytics_modeProperties&quot;"><Description><![CDATA[The identifier for the mode properties (a dictionary containing <tt>startTime</tt>, <tt>endTime</tt>) in <tt>$modelScopeParameters</tt>.]]></Description><Summary><![CDATA[The identifier for the mode properties (a dictionary containing <tt>startTime</tt>, <tt>endTime</tt>) in <tt>$modelScopeParameters</tt>.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_PRODUCTION" type="string" typeValue="&quot;PRODUCTION&quot;"><Description><![CDATA[Model is in production mode.]]></Description><Summary><![CDATA[Model is in production mode.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_SIMULATION" type="string" typeValue="&quot;SIMULATION&quot;"><Description><![CDATA[Model is in simulation mode.]]></Description><Summary><![CDATA[Model is in simulation mode.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_TEST" type="string" typeValue="&quot;TEST&quot;"><Description><![CDATA[Model is in test mode.]]></Description><Summary><![CDATA[Model is in test mode.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="ActivateModel"><Description><![CDATA[Sent by the eval manager to activate a newly deployed model.]]></Description><Summary><![CDATA[Sent by the eval manager to activate a newly deployed model.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="modelId" type="string"><TypeParameters/></Member></Type><Type category="Event" name="Activation"><Description><![CDATA[Representation of a model activation.

 Blocks should never create or store an instance of this. It should be received as a parameter of <tt>$process</tt> or <tt>$timeTriggered</tt> actions, and passed to <tt>$setOutput</tt> actions.]]></Description><Summary><![CDATA[Representation of a model activation.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="timestamp" type="float"><Description><![CDATA[The time of the evaluation.

 Stored as seconds since the Unix Epoch.]]></Description><Summary><![CDATA[The time of the evaluation.]]></Summary><TypeParameters/></Member><Member name="values" private="true" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[The values on all outputs. The output ID is the index within the sequence.]]></Description><Summary><![CDATA[The values on all outputs. The output ID is the index within the sequence.]]></Summary><TypeParameters/></Member><Member name="partition" type="any"><Description><![CDATA[Partition value.]]></Description><Summary><![CDATA[Partition value.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="AlarmDetails" private="true"><Description><![CDATA[Generic event for raising alarm.]]></Description><Summary><![CDATA[Generic event for raising alarm.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="type" private="true" type="string"><Description><![CDATA[Type of alarm.]]></Description><Summary><![CDATA[Type of alarm.]]></Summary><TypeParameters/></Member><Member name="text" private="true" type="string"><Description><![CDATA[Text for alarm.]]></Description><Summary><![CDATA[Text for alarm.]]></Summary><TypeParameters/></Member><Member name="time" private="true" type="float"><Description><![CDATA[Alarm time.]]></Description><Summary><![CDATA[Alarm time.]]></Summary><TypeParameters/></Member><Member name="severity" private="true" type="string"><Description><![CDATA[Severity.]]></Description><Summary><![CDATA[Severity.]]></Summary><TypeParameters/></Member><Member constant="true" name="CHANNEL" private="true" type="string" typeValue="&quot;ALARM_DETAILS_CHANNEL&quot;"><Description><![CDATA[Channel to which this event would be sent.]]></Description><Summary><![CDATA[Channel to which this event would be sent.]]></Summary><TypeParameters/></Member><Action name="raiseAlarm" private="true" sortKey="static-0-raiseAlarm" staticNature="static "><Description><![CDATA[Raise an alarm with currentTime.]]></Description><Summary><![CDATA[Raise an alarm with currentTime.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="alarmSeverity" type="string"/><Parameter name="alarmType" type="string"/><Parameter name="alarmText" type="string"/></Parameters></Action><Action name="raiseAlarmForOlderAPIs" private="true" sortKey="static-0-raiseAlarmForOlderAPIs" staticNature="static "><Description><![CDATA[Raise alarm as block is using older APIs.@private]]></Description><Summary><![CDATA[Raise alarm as block is using older APIs.@private]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="block" type="string"/></Parameters></Action></Type><Type category="Event" name="BlockBase"><Description><![CDATA[The base event for all blocks. Every block implementation must have a field named <tt>$base</tt> of this event type.

 This provides a number of methods for blocks to interact with the framework.]]></Description><Summary><![CDATA[The base event for all blocks. Every block implementation must have a field named <tt>$base</tt> of this event type.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="PROFILE_OUTPUT" type="integer" typeValue="0"><Description><![CDATA[Pass to the profile action when a block generates an output external to the model.]]></Description><Summary><![CDATA[Pass to the profile action when a block generates an output external to the model.]]></Summary><TypeParameters/></Member><Member constant="true" name="PROFILE_DROPPED" private="true" type="integer" typeValue="1"><Description><![CDATA[Used to report dropped event for profiling.]]></Description><Summary><![CDATA[Used to report dropped event for profiling.]]></Summary><TypeParameters/></Member><Member name="createBlockTimer" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="TimerParams"/><Parameter type="string"/></Parameters><Returns package="apama.analyticsbuilder" type="TimerHandle"/><Description/><Summary/><TypeParameters/></Member><Member name="cancelBlockTimer" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="TimerHandle"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="getWorkerId" private="true" type="action"><Parameters/><Returns type="integer"/><Description/><Summary/><TypeParameters/></Member><Member name="inputHandlerCreated" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="InputHandler"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="outputHandlerCreated" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="OutputHandler"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="blockProcess" private="true" type="optional"><Parameters><Parameter type="apama.analyticsbuilder.framework.Action"/></Parameters><Description><![CDATA[The <tt>$process</tt> action of a block. Called if block has inputs.]]></Description><Summary><![CDATA[The <tt>$process</tt> action of a block. Called if block has inputs.]]></Summary><TypeParameters/></Member><Member name="timerTriggered" private="true" type="optional"><Parameters><Parameter type="apama.analyticsbuilder.framework.Action"/></Parameters><Description><![CDATA[The <tt>$timerTriggered</tt> action of a block. Called when timer is expired.]]></Description><Summary><![CDATA[The <tt>$timerTriggered</tt> action of a block. Called when timer is expired.]]></Summary><TypeParameters/></Member><Member name="timerRejected" private="true" type="optional"><Parameters><Parameter type="apama.analyticsbuilder.framework.Action"/></Parameters><Description><![CDATA[The <tt>$timerRejected</tt> action of a block. Called when absolute timer is too old.]]></Description><Summary><![CDATA[The <tt>$timerRejected</tt> action of a block. Called when absolute timer is too old.]]></Summary><TypeParameters/></Member><Member name="fastTimerTriggered" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="Activation"/><Parameter type="any"/></Parameters><Description><![CDATA[The direct reference to non-generic version of the $timerTriggered action if it matches specific signature. Used for faster invocation if present.]]></Description><Summary><![CDATA[The direct reference to non-generic version of the $timerTriggered action if it matches specific signature. Used for faster invocation if present.]]></Summary><TypeParameters/></Member><Member name="modelSchema" private="true" type="apama.analyticsbuilder.framework.ModelSchema"><Description><![CDATA[Shared state required by all blocks.]]></Description><Summary><![CDATA[Shared state required by all blocks.]]></Summary><TypeParameters/></Member><Member name="blockDoesIO" private="true" type="action"><Parameters><Parameter type="string"/><Parameter type="apama.analyticsbuilder.framework.BlockIO"/><Parameter type="boolean"/></Parameters><Returns type="string"/><Description><![CDATA[Inform EvalManager of this block's input/ output. Callback to Framework. Arguments are INPUT/OUTPUT, BlockIO that identifies the stream.]]></Description><Summary><![CDATA[Inform EvalManager of this block's input/ output. Callback to Framework. Arguments are INPUT/OUTPUT, BlockIO that identifies the stream.]]></Summary><TypeParameters/></Member><Member constant="true" name="INPUT" private="true" type="string" typeValue="&quot;INPUT&quot;"><Description><![CDATA[Potential value for first argument of blockDoesIO.]]></Description><Summary><![CDATA[Potential value for first argument of blockDoesIO.]]></Summary><TypeParameters/></Member><Member constant="true" name="OUTPUT" private="true" type="string" typeValue="&quot;OUTPUT&quot;"><Description><![CDATA[Potential value for first argument of blockDoesIO.]]></Description><Summary><![CDATA[Potential value for first argument of blockDoesIO.]]></Summary><TypeParameters/></Member><Member name="inputTypeInfo" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="apama.analyticsbuilder.framework.ActionParamInfo"/></Parameters><Description><![CDATA[The type info of the inputs, keyed by full input name (input[.<index>] - index if multi-valued.)]]></Description><Summary><![CDATA[The type info of the inputs, keyed by full input name (input[.<index>] - index if multi-valued.)]]></Summary><TypeParameters/></Member><Member name="modelState" private="true" type="apama.analyticsbuilder.framework.ModelRuntimeState"><Description><![CDATA[Current model runtime state.]]></Description><Summary><![CDATA[Current model runtime state.]]></Summary><TypeParameters/></Member><Member name="blockId" private="true" type="string"><Description><![CDATA[The ID of the block instance.]]></Description><Summary><![CDATA[The ID of the block instance.]]></Summary><TypeParameters/></Member><Member name="modelId" private="true" type="string"><Description><![CDATA[The ID of the model this block is part of.]]></Description><Summary><![CDATA[The ID of the model this block is part of.]]></Summary><TypeParameters/></Member><Member name="blockType" private="true" type="string"><Description><![CDATA[The type of the block instance.]]></Description><Summary><![CDATA[The type of the block instance.]]></Summary><TypeParameters/></Member><Member name="blockStatePrototype" private="true" type="any"><Description><![CDATA[Prototype for creating new instance of the block's state object.]]></Description><Summary><![CDATA[Prototype for creating new instance of the block's state object.]]></Summary><TypeParameters/></Member><Member name="blockIndex" private="true" type="integer"><Description><![CDATA[The index of the block in the evaluation order. Used to directly access block from list of blocks order by evaluation order.]]></Description><Summary><![CDATA[The index of the block in the evaluation order. Used to directly access block from list of blocks order by evaluation order.]]></Summary><TypeParameters/></Member><Member name="receivesFromChain" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="boolean"/></Parameters><Description><![CDATA[Mark if this block is receiving inputs from model chain.]]></Description><Summary><![CDATA[Mark if this block is receiving inputs from model chain.]]></Summary><TypeParameters/></Member><Member name="blockProfiled" private="true" type="action"><Parameters><Parameter type="integer"/></Parameters><Description><![CDATA[Report block profiling.]]></Description><Summary><![CDATA[Report block profiling.]]></Summary><TypeParameters/></Member><Member name="allInputIds" private="true" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[Sequence if InputIds to the block]]></Description><Summary><![CDATA[Sequence if InputIds to the block]]></Summary><TypeParameters/></Member><Member name="isModelPartitioned" private="true" type="action"><Parameters/><Returns type="boolean"/><Description><![CDATA[Set if model is partitioned.]]></Description><Summary><![CDATA[Set if model is partitioned.]]></Summary><TypeParameters/></Member><Action name="callProcess" private="true" sortKey="static-1-callProcess" staticNature=""><Description><![CDATA[Call <tt>$process</tt> action. Get values for the inputs from the activation.]]></Description><Summary><![CDATA[Call <tt>$process</tt> action. Get values for the inputs from the activation.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="cc" type="apama.analyticsbuilder.framework.CallContext"/></Parameters></Action><Action name="cancelTimer" sortKey="static-1-cancelTimer" staticNature=""><Description><![CDATA[Cancel the timer specified by the timer handle.]]></Description><Summary><![CDATA[Cancel the timer specified by the timer handle.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[<tt>IllegalArgumentException</tt> if the timer is already canceled or triggered.]]></Description></Throws><Parameters><Parameter name="handle" package="apama.analyticsbuilder" type="TimerHandle"><Description><![CDATA[The handle to a previously created timer.]]></Description></Parameter></Parameters></Action><Action name="checkTimerTriggeredDefined" private="true" sortKey="static-1-checkTimerTriggeredDefined" staticNature=""><Description><![CDATA[Check if a $timerTriggered action is defined by the block.]]></Description><Summary><![CDATA[Check if a $timerTriggered action is defined by the block.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="consumesInput" sortKey="static-1-consumesInput" staticNature=""><Description><![CDATA[Declare this block is an input block that consumes input events described by the <tt>inputParams</tt> parameter.

 An input block receives events from outside the model, potentially from other models. This must be called during <tt>$validate</tt>, not afterward.]]></Description><Summary><![CDATA[Declare this block is an input block that consumes input events described by the <tt>inputParams</tt> parameter.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="InputHandler"><Description><![CDATA[The input handler that should be used for scheduling input events for processing.]]></Description></Returns><Parameters><Parameter name="inputParams" package="apama.analyticsbuilder" type="InputParams"><Description><![CDATA[The parameters describing an input event stream.]]></Description></Parameter></Parameters></Action><Action name="createTimer" sortKey="static-1-createTimer" staticNature=""><Description><![CDATA[Create a timer with the specified duration. The <tt>$timerTriggered</tt> action of the block is called when the timer is triggered.]]></Description><Summary><![CDATA[Create a timer with the specified duration. The <tt>$timerTriggered</tt> action of the block is called when the timer is triggered.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="durationSec" type="float"><Description><![CDATA[The duration in seconds after which the timer should be triggered.]]></Description></Parameter><Parameter name="payload" type="any"><Description><![CDATA[The payload value which will be supplied back when <tt>$timerTriggered</tt> action is called.]]></Description></Parameter></Parameters></Action><Action name="createTimerWith" sortKey="static-1-createTimerWith" staticNature=""><Description><![CDATA[Create a timer with the specified parameters. The <tt>$timerTriggered</tt> action of the block is called when the timer is triggered.]]></Description><Summary><![CDATA[Create a timer with the specified parameters. The <tt>$timerTriggered</tt> action of the block is called when the timer is triggered.]]></Summary><TypeParameters/><See action="cancelTimer" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[Use this action to cancel the timer.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerHandle"><Description><![CDATA[The handle to the created timer which can be used to cancel it.]]></Description></Returns><Parameters><Parameter name="timerParams" package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[The parameters for specifying the timer type and other information about it.]]></Description></Parameter></Parameters></Action><Action name="droppedEvent" sortKey="static-1-droppedEvent" staticNature=""><Description><![CDATA[Notify framework that this block has dropped an input event.]]></Description><Summary><![CDATA[Notify framework that this block has dropped an input event.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="evt" type="any"><Description><![CDATA[The event that was dropped.]]></Description></Parameter><Parameter name="time" type="float"><Description><![CDATA[The timestamp.]]></Description></Parameter></Parameters></Action><Action name="getBlockId" sortKey="static-1-getBlockId" staticNature=""><Description><![CDATA[Get the block identifier. Useful for debugging only.]]></Description><Summary><![CDATA[Get the block identifier. Useful for debugging only.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"><Description><![CDATA[Block identifier.]]></Description></Returns></Action><Action name="getCurrentWorkerId" sortKey="static-1-getCurrentWorkerId" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="getInputCount" sortKey="static-1-getInputCount" staticNature=""><Description><![CDATA[Get the number of connections for an input.]]></Description><Summary><![CDATA[Get the number of connections for an input.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="input" type="string"/></Parameters></Action><Action name="getInputTypeName" sortKey="static-1-getInputTypeName" staticNature=""><Description><![CDATA[Get the type name of an input.]]></Description><Summary><![CDATA[Get the type name of an input.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"><Description><![CDATA[Type name.]]></Description></Returns><Parameters><Parameter name="input" type="string"/></Parameters></Action><Action name="getL10N_input" sortKey="static-1-getL10N_input" staticNature=""><Description><![CDATA[Get a localized sub-message to identify an input.

 Get a sub-message object that can be passed as a member of parameters to <tt>getLocalizedException</tt> or <tt>getLocalizedSubMsg</tt>.]]></Description><Summary><![CDATA[Get a localized sub-message to identify an input.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[Localized sub-message.]]></Description></Returns><Parameters><Parameter name="inputId" type="string"><Description><![CDATA[The input (without <tt>$input_</tt> prefix).]]></Description></Parameter></Parameters></Action><Action name="getL10N_output" sortKey="static-1-getL10N_output" staticNature=""><Description><![CDATA[Get a localized sub-message to identify an output.

 Get a sub-message that can be passed as a member of parameters to <tt>getLocalizedException</tt> or <tt>getLocalizedSubMsg</tt>.]]></Description><Summary><![CDATA[Get a localized sub-message to identify an output.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[Localized sub-message.]]></Description></Returns><Parameters><Parameter name="outputId" type="string"><Description><![CDATA[The output (without <tt>$setOutput_</tt> prefix).]]></Description></Parameter></Parameters></Action><Action name="getL10N_param" sortKey="static-0-getL10N_param" staticNature="static "><Description><![CDATA[Get a localized sub-message to identify a parameter.

 Get a sub-message that can be passed as a member of parameters to <tt>getLocalizedException</tt> or <tt>getLocalizedSubMsg</tt>.]]></Description><Summary><![CDATA[Get a localized sub-message to identify a parameter.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[Localized sub-message.]]></Description></Returns><Parameters><Parameter name="parameterId" type="string"><Description><![CDATA[The parameter.]]></Description></Parameter><Parameter name="blockOrParam" type="any"><Description><![CDATA[The block or parameters object (or a <tt>BlockBase</tt> object).]]></Description></Parameter></Parameters></Action><Action name="getModelId" sortKey="static-1-getModelId" staticNature=""><Description><![CDATA[Get the unique model identifier.

 It is internal runtime identifier and is not guaranteed to remain same across multiple model deployments and un-deployments.]]></Description><Summary><![CDATA[Get the unique model identifier.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"><Description><![CDATA[Model identifier.]]></Description></Returns></Action><Action name="getModelTime" sortKey="static-1-getModelTime" staticNature=""><Description><![CDATA[The current effective model time. This should be used instead of <tt>currentTime</tt> when access to the current time is required. The time for any absolute timer must be greater than this value.]]></Description><Summary><![CDATA[The current effective model time. This should be used instead of <tt>currentTime</tt> when access to the current time is required. The time for any absolute timer must be greater than this value.]]></Summary><Deprecated><Description><![CDATA[This action has been deprecated. Use the <tt>timestamp</tt> field of the <tt>Activation</tt> event to get the current model time.]]></Description><Summary><![CDATA[This action has been deprecated. Use the <tt>timestamp</tt> field of the <tt>Activation</tt> event to get the current model time.]]></Summary></Deprecated><TypeParameters/><See field="timestamp" package="apama.analyticsbuilder" type="Activation"><Description><![CDATA[to get the current model time.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="getTenantDetails" sortKey="static-1-getTenantDetails" staticNature=""><Description><![CDATA[get the current tenant details.]]></Description><Summary><![CDATA[get the current tenant details.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="com.apama.cumulocity.TenantDetails"/></Action><Action name="isValueTypeCompatibleWithInput" private="true" sortKey="static-1-isValueTypeCompatibleWithInput" staticNature=""><Description><![CDATA[Check if the valueType is compatible with the input type.]]></Description><Summary><![CDATA[Check if the valueType is compatible with the input type.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="inputName" type="string"/><Parameter name="valueType" type="string"/></Parameters></Action><Action name="listensForInput" private="true" sortKey="static-1-listensForInput" staticNature=""><Description><![CDATA[Declare this block is an input block.]]></Description><Summary><![CDATA[Declare this block is an input block.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="eventTypeName" type="string"/><Parameter name="fields" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters></Parameter><Parameter name="partitionValue" type="any"/></Parameters></Action><Action name="producesOutput" sortKey="static-1-producesOutput" staticNature=""><Description><![CDATA[Declare this block is an output block that produces events described by the <tt>outputParams</tt> parameter.

 An output block sends events to outside the model, potentially to other models. This must be called during <tt>$validate</tt>, not afterward.]]></Description><Summary><![CDATA[Declare this block is an output block that produces events described by the <tt>outputParams</tt> parameter.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="OutputHandler"><Description><![CDATA[The output handler that should be used for sending output events.]]></Description></Returns><Parameters><Parameter name="outputParams" package="apama.analyticsbuilder" type="OutputParams"><Description><![CDATA[The parameters describing an output event stream.]]></Description></Parameter></Parameters></Action><Action name="profile" sortKey="static-1-profile" staticNature=""><Description><![CDATA[Called by blocks to notify of an operation performed for profiling purposes.]]></Description><Summary><![CDATA[Called by blocks to notify of an operation performed for profiling purposes.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="type" type="integer"><Description><![CDATA[The type of the operation. See the constants starting with <tt>PROFILE</tt> for supported profiling operations.]]></Description></Parameter></Parameters></Action><Action name="sendsAsyncOutput" private="true" sortKey="static-1-sendsAsyncOutput" staticNature=""><Description><![CDATA[Declare this block is an output block that sends asynchronous output.]]></Description><Summary><![CDATA[Declare this block is an output block that sends asynchronous output.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="eventTypeName" type="string"/><Parameter name="partitionValue" type="any"/></Parameters></Action><Action name="sendsSyncOutput" private="true" sortKey="static-1-sendsSyncOutput" staticNature=""><Description><![CDATA[Declare this block is an output block that sends synchronous output.]]></Description><Summary><![CDATA[Declare this block is an output block that sends synchronous output.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="eventTypeName" type="string"/><Parameter name="fields" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters></Parameter><Parameter name="partitionValue" type="any"/></Parameters></Action><Action name="throwsOnEmpty" sortKey="static-0-throwsOnEmpty" staticNature="static "><Description><![CDATA[Throw if the value is empty.

 Use to validate a string parameter that should not be empty.]]></Description><Summary><![CDATA[Throw if the value is empty.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="any"><Description><![CDATA[The value that should not be empty.]]></Description></Parameter><Parameter name="paramId" type="string"><Description><![CDATA[The name of the field (this will be translated).]]></Description></Parameter><Parameter name="blockOrParam" type="any"><Description><![CDATA[The block or parameters object (or a <tt>BlockBase</tt> object).]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="BlockConfiguration" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="type" private="true" type="string"><Description><![CDATA[The fully qualified name of the block type.]]></Description><Summary><![CDATA[The fully qualified name of the block type.]]></Summary><TypeParameters/></Member><Member name="parameters" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The values for the block parameters. The keys are parameter names and the values are parameter values. It is an error to specify a value for non-existing parameters. It is an error to not specify a value for a required parameter. It is also an error to specify a parameter value of an incorrect type.]]></Description><Summary><![CDATA[The values for the block parameters. The keys are parameter names and the values are parameter values. It is an error to specify a value for non-existing parameters. It is an error to not specify a value for a required parameter. It is also an error to specify a parameter value of an incorrect type.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="BlockInfoRequest" private="true"><Description><![CDATA[Get all data for a given language.

 Responded to by BlockMetadatAResponse on channel.]]></Description><Summary><![CDATA[Get all data for a given language.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="requestId" private="true" type="integer"><TypeParameters/></Member><Member name="lang" private="true" type="string"><TypeParameters/></Member><Member name="channel" private="true" type="string"><Description><![CDATA[The channel to which BlockMetadatAResponse will be sent.]]></Description><Summary><![CDATA[The channel to which BlockMetadatAResponse will be sent.]]></Summary><TypeParameters/></Member><Member constant="true" name="REQUEST_CHANNEL" private="true" type="string" typeValue="&quot;analyticsbuilder.metadata.requests&quot;"><Description><![CDATA[The channel to which BlockInfoRequest must be sent.]]></Description><Summary><![CDATA[The channel to which BlockInfoRequest must be sent.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="BlockInfoResponse" private="true"><Description><![CDATA[Response of BlockInfoRequest.]]></Description><Summary><![CDATA[Response of BlockInfoRequest.]]></Summary><TypeParameters/><See package="apama.analyticsbuilder" type="BlockInfoRequest"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="blocks" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Description><![CDATA[Catalog name to list of block descriptions]]></Description><Summary><![CDATA[Catalog name to list of block descriptions]]></Summary><TypeParameters/></Member><Member name="messages" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="dictionary"><Parameters><Parameter type="string"/><Parameter type="string"/></Parameters></Parameter></Parameters><Description><![CDATA[Catalog name to map of messages (id: message)]]></Description><Summary><![CDATA[Catalog name to map of messages (id: message)]]></Summary><TypeParameters/></Member><Member name="requestId" private="true" type="integer"><Description><![CDATA[correlation id]]></Description><Summary><![CDATA[correlation id]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="BlockMessages" private="true"><Description><![CDATA[Register a new set of messages.

 Typically created by the analytics_builder script.]]></Description><Summary><![CDATA[Register a new set of messages.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="name" private="true" type="string"><TypeParameters/></Member><Member name="lang" private="true" type="string"><TypeParameters/></Member><Member name="jsonText" private="true" type="string"><TypeParameters/></Member></Type><Type category="Event" name="BlockMetadata" private="true"><Description><![CDATA[Register a new block catalog.

 Typically created by the analytics_builder script.]]></Description><Summary><![CDATA[Register a new block catalog.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="name" private="true" type="string"><TypeParameters/></Member><Member name="lang" private="true" type="string"><TypeParameters/></Member><Member name="jsonText" private="true" type="string"><TypeParameters/></Member></Type><Type category="Event" name="ConfigHelper" private="true"><Description><![CDATA[Access configuration properties.

 This type provides methods for getting configuration properties. Note that these calls are not especially cheap; if a value is required while processing events, it is best to query it at startup and re-use the value.]]></Description><Summary><![CDATA[Access configuration properties.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="getAny" private="true" sortKey="static-0-getAny" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[Exception if propertyName is not valid or if property is not configured.]]></Description></Throws><Returns type="any"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter><Parameter name="defaultValue" type="any"/></Parameters></Action><Action name="getFloat" private="true" sortKey="static-0-getFloat" staticNature="static "><Description><![CDATA[Gets the configurable property of type float.]]></Description><Summary><![CDATA[Gets the configurable property of type float.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter></Parameters></Action><Action name="getInteger" private="true" sortKey="static-0-getInteger" staticNature="static "><Description><![CDATA[Gets the configurable property of type integer.]]></Description><Summary><![CDATA[Gets the configurable property of type integer.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter></Parameters></Action><Action name="getString" private="true" sortKey="static-0-getString" staticNature="static "><Description><![CDATA[Gets the configurable property of type string.]]></Description><Summary><![CDATA[Gets the configurable property of type string.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter></Parameters></Action><Action name="getStringOr" private="true" sortKey="static-0-getStringOr" staticNature="static "><Description><![CDATA[Gets the configurable property of type string.]]></Description><Summary><![CDATA[Gets the configurable property of type string.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter><Parameter name="defaultValue" type="string"/></Parameters></Action><Action name="isValidPropertyName" private="true" sortKey="static-0-isValidPropertyName" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="propertyName" type="string"><Description><![CDATA[The property name to validate.]]></Description></Parameter></Parameters></Action><Action name="logMessage" private="true" sortKey="static-0-logMessage" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="propertyName" type="string"/><Parameter name="value" type="string"/><Parameter name="source" type="string"/></Parameters></Action><Action name="mapPropertyToConstant" private="true" sortKey="static-0-mapPropertyToConstant" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="propertyName" type="string"/></Parameters></Action></Type><Type category="Event" name="ConfigPropertyData" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="PROPERTY_NAME_PREFIX" private="true" type="string" typeValue="&quot;analyticsBuilder.&quot;"><TypeParameters/></Member><Member constant="true" name="STATUS_PROPERTY_PREFIX" private="true" type="string" typeValue="&quot;status_&quot;"><TypeParameters/></Member><Member constant="true" name="NUM_WORKERS_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.numWorkerThreads&quot;"><TypeParameters/></Member><Member constant="true" name="TIME_DELAY_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.timedelay_secs&quot;"><TypeParameters/></Member><Member constant="true" name="LOGGING_THROTTLE_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.logging_throttle_secs&quot;"><TypeParameters/></Member><Member constant="true" name="MINIMUM_WAIT_TIME_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.minimum_wait_time_secs&quot;"><TypeParameters/></Member><Member constant="true" name="STATUS_PERIOD_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.status_period_secs&quot;"><TypeParameters/></Member><Member constant="true" name="MATCH_STRING_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.status_device_name&quot;"><TypeParameters/></Member><Member constant="true" name="SEND_TYPE_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.status_send_type&quot;"><TypeParameters/></Member><Member constant="true" name="EVENT_TYPE_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.status_event_type&quot;"><TypeParameters/></Member><Member constant="true" name="EVENT_TEXT_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.status_event_text&quot;"><TypeParameters/></Member><Member constant="true" name="SEND_KEYS_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.status_send_keys&quot;"><TypeParameters/></Member><Member constant="true" name="DEFAULT_TIMEOUT_PROPERTY_NAME" private="true" type="string" typeValue="&quot;analyticsBuilder.default_timeout_secs&quot;"><Description/><Summary/><Deprecated><Description><![CDATA[[This is a deprecated concept, but the Duerr blocks still (accidentally) make use of this private constant]]]></Description><Summary><![CDATA[[This is a deprecated concept, but the Duerr blocks still (accidentally) make use of this private constant]]]></Summary></Deprecated><TypeParameters/></Member><Action name="getKeyProperties" private="true" sortKey="static-0-getKeyProperties" staticNature="static "><Description><![CDATA[Returns a dictionary with the key configurable properties.]]></Description><Summary><![CDATA[Returns a dictionary with the key configurable properties.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="dictionary"><Parameters><Parameter type="string"/><Parameter type="boolean"/></Parameters></Returns></Action><Action name="getStatusProperties" private="true" sortKey="static-0-getStatusProperties" staticNature="static "><Description><![CDATA[Returns a dictionary with the key configurable properties.]]></Description><Summary><![CDATA[Returns a dictionary with the key configurable properties.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="dictionary"><Parameters><Parameter type="string"/><Parameter type="string"/></Parameters></Returns></Action></Type><Type category="Event" name="Configuration" private="true"><Description><![CDATA[Holder for tunable configuration options.

 Constants and actions on this event can be modified to tune the behaviour of the Analytics Builder runtime.]]></Description><Summary><![CDATA[Holder for tunable configuration options.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="DEFAULT_TIMEOUT_SECS" private="true" type="float" typeValue="10.0"><Description/><Summary/><Deprecated><Description><![CDATA[[This is a deprecated concept, but the Duerr blocks still (accidentally) make use of this private constant]]]></Description><Summary><![CDATA[[This is a deprecated concept, but the Duerr blocks still (accidentally) make use of this private constant]]]></Summary></Deprecated><TypeParameters/></Member><Member constant="true" name="TIMEDELAY_SECS" private="true" type="float" typeValue="1.0"><Description><![CDATA[The maximum delay in seconds before Input blocks consider an event to be old.

 Input blocks re-order input events, which is achieved by not processing them until TIMEDELAY_SECS after the timestamp in the object, thus delaying processing by this amount. If the event is delayed in its delivery to the correlator, such that the delay is greater than or equal to this value, then the input is considered old and will be dropped and not processed.]]></Description><Summary><![CDATA[The maximum delay in seconds before Input blocks consider an event to be old.]]></Summary><TypeParameters/></Member><Member constant="true" name="LOGGING_THROTTLE_SECS" private="true" type="float" typeValue="1.0"><Description><![CDATA[Logging throttling in seconds.

 Interval used for periodic logging, such as reporting changes in the number of dropped events by Input blocks (for events delayed by more than TIMEDELAY_SECS).  Log statements will not appear more frequently than this period.]]></Description><Summary><![CDATA[Logging throttling in seconds.]]></Summary><TypeParameters/></Member><Member constant="true" name="MINIMUM_WAIT_TIME_SECS" private="true" type="float" typeValue="0.1"><Description><![CDATA[Minimum wait time in seconds.

 Some blocks can generate output automatically, based on the rate of change of the output. This sets a lower limit on the time between outputs, in seconds.]]></Description><Summary><![CDATA[Minimum wait time in seconds.]]></Summary><TypeParameters/></Member><Action name="onModelEnd" private="true" sortKey="static-0-onModelEnd" staticNature="static "><Description><![CDATA[Report the end of a model.

 Whenever a model is deleted this action is called to report the deletion.

 At a minimum, this would log to the log file.]]></Description><Summary><![CDATA[Report the end of a model.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="name" type="string"><Description><![CDATA[The model name.]]></Description></Parameter><Parameter name="id" type="string"><Description><![CDATA[The model identifier.]]></Description></Parameter><Parameter name="model" type="any"><Description><![CDATA[The whole model.]]></Description></Parameter><Parameter name="modelProperties" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[A copy of the model's properties.]]></Description></Parameter></Parameters></Action><Action name="onModelFailure" private="true" sortKey="static-0-onModelFailure" staticNature="static "><Description><![CDATA[Report model failure.

 Whenever any type of error (deployment time or during runtime) occurs in the model this action is called to report the error.

 At a minimum, this would log to the log file.]]></Description><Summary><![CDATA[Report model failure.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="name" type="string"><Description><![CDATA[The model name]]></Description></Parameter><Parameter name="id" type="string"><Description><![CDATA[The model identifier]]></Description></Parameter><Parameter name="reason" type="string"><Description><![CDATA[Description of why the model failed]]></Description></Parameter><Parameter name="modelProperties" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[A copy of the model's properties.]]></Description></Parameter><Parameter name="exception" type="com.apama.exceptions.Exception"><Description><![CDATA[If available, the exception. An empty stack trace indicates no exception is available.]]></Description></Parameter></Parameters></Action><Action name="onModelStart" private="true" sortKey="static-0-onModelStart" staticNature="static "><Description><![CDATA[Report the start of a model.

 Whenever a model is created this action is called to report the creation.

 At a minimum, this would log to the log file.]]></Description><Summary><![CDATA[Report the start of a model.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="name" type="string"><Description><![CDATA[The model name.]]></Description></Parameter><Parameter name="id" type="string"><Description><![CDATA[The model identifier.]]></Description></Parameter><Parameter name="model" type="any"><Description><![CDATA[The whole model.]]></Description></Parameter><Parameter name="modelProperties" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[A copy of the model's properties.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="ConfigurationProperty"><Description><![CDATA[Values from configurable properties which are passed to blocks as one of the action parameters.]]></Description><Summary><![CDATA[Values from configurable properties which are passed to blocks as one of the action parameters.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="timeDelay" type="float"><Description><![CDATA[The maximum delay in seconds before input blocks consider an event to be old.]]></Description><Summary><![CDATA[The maximum delay in seconds before input blocks consider an event to be old.]]></Summary><TypeParameters/></Member><Member name="minWaitTime" type="float"><Description><![CDATA[Some blocks can generate output automatically, based on the rate of change of the output. This sets a lower limit on the time between outputs, in seconds.]]></Description><Summary><![CDATA[Some blocks can generate output automatically, based on the rate of change of the output. This sets a lower limit on the time between outputs, in seconds.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="CreateModel" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="state" package="apama.analyticsbuilder" private="true" type="ModelState"><Description><![CDATA[Information about the model to create.]]></Description><Summary><![CDATA[Information about the model to create.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="DroppedEvent" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="evt" private="true" type="any"><TypeParameters/></Member><Member name="eventName" private="true" type="string"><TypeParameters/></Member><Member constant="true" name="CHANNEL" private="true" type="string" typeValue="&quot;AnalyticsDroppedEvents&quot;"><Description><![CDATA[Name of the channel where dropped events are sent.

 All events that are dropped by the input blocks are send to this channel.]]></Description><Summary><![CDATA[Name of the channel where dropped events are sent.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="EventPartition"><Description><![CDATA[Partition of an event type.]]></Description><Summary><![CDATA[Partition of an event type.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="eventName" type="string"><TypeParameters/></Member><Member name="partition" type="any"><TypeParameters/></Member></Type><Type category="Event" name="InputHandler"><Description><![CDATA[A handler which is used for scheduling input events to be processed at the earliest possible time or at the provided timestamp.]]></Description><Summary><![CDATA[A handler which is used for scheduling input events to be processed at the earliest possible time or at the provided timestamp.]]></Summary><TypeParameters/><See action="consumesInput" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[To declare an input block that returns an input handler.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="inputId" private="true" type="string"><Description><![CDATA[The input ID.]]></Description><Summary><![CDATA[The input ID.]]></Summary><TypeParameters/></Member><Member name="timeValue" private="true" type="float"><Description><![CDATA[The latest timestamp assigned to input events.

 We only use it as a tiebreaker if we don't have source timestamp of input event and receive events at the same model time. We don't care about it being independent across different partitions, nor persisted across correlator instances.]]></Description><Summary><![CDATA[The latest timestamp assigned to input events.]]></Summary><TypeParameters/></Member><Member name="isGroup" private="true" type="boolean"><Description><![CDATA[True if the specified source partition is a group, that is wildcard partition.]]></Description><Summary><![CDATA[True if the specified source partition is a group, that is wildcard partition.]]></Summary><TypeParameters/></Member><Member name="isBroadcast" private="true" type="boolean"><Description><![CDATA[True if the specified source device id is a broadcast device.]]></Description><Summary><![CDATA[True if the specified source device id is a broadcast device.]]></Summary><TypeParameters/></Member><Member name="createTimerWith" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="TimerParams"/></Parameters><Returns package="apama.analyticsbuilder" type="TimerHandle"/><Description><![CDATA[The reference to the apama.analyticsbuilder.BlockBase#createTimerWith() action to create timers. We cannot directly call action of BlockBase because BlockBase depends on InputHandler so we cannot directly use it.]]></Description><Summary><![CDATA[The reference to the apama.analyticsbuilder.BlockBase#createTimerWith() action to create timers. We cannot directly call action of BlockBase because BlockBase depends on InputHandler so we cannot directly use it.]]></Summary><TypeParameters/></Member><Member name="droppedEvent" private="true" type="action"><Parameters><Parameter type="any"/><Parameter type="float"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="_emptyFloat" private="true" type="optional"><Parameters><Parameter type="float"/></Parameters><Description><![CDATA[The empty float value used for timestamp parameter.]]></Description><Summary><![CDATA[The empty float value used for timestamp parameter.]]></Summary><TypeParameters/></Member><Action name="schedule" sortKey="static-1-schedule" staticNature=""><Description><![CDATA[Schedule the input event to be processed at the specified time. If no time is specified then the input event is scheduled to be processed as soon as possible.

 This creates a timer for the specified timestamp or the earliest possible time. When the timer is triggered, the <tt>$timerTriggered</tt> action of the block is called and the <tt>inputEvent</tt> is passed as the payload.]]></Description><Summary><![CDATA[Schedule the input event to be processed at the specified time. If no time is specified then the input event is scheduled to be processed as soon as possible.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerHandle"><Description><![CDATA[The handle to the timer created.]]></Description></Returns><Parameters><Parameter name="inputEvent" type="any"><Description><![CDATA[The input event.]]></Description></Parameter><Parameter name="timestamp" type="optional"><Parameters><Parameter type="float"/></Parameters><Description><![CDATA[The source timestamp of the event. Pass empty value if the source timestamp is not to be used or not available.]]></Description></Parameter><Parameter name="partition" type="any"><Description><![CDATA[The partition to which the input value belongs, if it is partitioned. Pass an empty value if the input is not partitioned.]]></Description></Parameter></Parameters></Action><Action name="scheduleNow" sortKey="static-1-scheduleNow" staticNature=""><Description><![CDATA[Schedule the input event to be processed as soon as possible.

 This creates a timer for the earliest possible time. When the timer is triggered, the $timerTriggered action of the block is called and the value is passed as payload.]]></Description><Summary><![CDATA[Schedule the input event to be processed as soon as possible.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerHandle"><Description><![CDATA[The handle to the timer created.]]></Description></Returns><Parameters><Parameter name="value" type="any"><Description><![CDATA[The input event.]]></Description></Parameter><Parameter name="partition" type="any"><Description><![CDATA[The partition to which the input value belongs, if it is partitioned. Pass empty value if the input is not partitioned.]]></Description></Parameter></Parameters></Action><Action name="timerRejected" private="true" sortKey="static-1-timerRejected" staticNature=""><Description><![CDATA[The action which is called when a timer created by this handler is called.]]></Description><Summary><![CDATA[The action which is called when a timer created by this handler is called.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="evt" type="any"/><Parameter name="time" type="float"/></Parameters></Action></Type><Type category="Event" name="InputParams"><Description><![CDATA[Parameters for describing a stream of events consumed by an input block.

 The combination of event type, field values, and partition value identifies the input stream.

 This is typically used as: <pre>
InputHandler inputHandler;

action $validate() {
	InputParams params := InputParams.forEventType(MyEvent.getName(), new dictionary<string,any>).withPartitionValue(source);
	inputHandler := $base.consumesInput(params);
}
</pre>]]></Description><Summary><![CDATA[Parameters for describing a stream of events consumed by an input block.]]></Summary><TypeParameters/><See action="consumesInput" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[To declare an input block.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="eventType" private="true" type="string"><Description><![CDATA[The event type that the block is listening.]]></Description><Summary><![CDATA[The event type that the block is listening.]]></Summary><TypeParameters/></Member><Member name="fields" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values that the block listens, which together with eventType and partitionValue, identify a stream of events.]]></Description><Summary><![CDATA[The field values that the block listens, which together with eventType and partitionValue, identify a stream of events.]]></Summary><TypeParameters/></Member><Member name="partitionValue" private="true" type="any"><Description><![CDATA[The partition value.]]></Description><Summary><![CDATA[The partition value.]]></Summary><TypeParameters/></Member><Member name="isSync" private="true" type="boolean"><Description><![CDATA[Is the input synchronous (true by default).]]></Description><Summary><![CDATA[Is the input synchronous (true by default).]]></Summary><TypeParameters/></Member><Action name="forEventType" sortKey="static-0-forEventType" staticNature="static "><Description><![CDATA[Create a new <tt>InputParams</tt> for the specified event type.]]></Description><Summary><![CDATA[Create a new <tt>InputParams</tt> for the specified event type.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="InputParams"><Description><![CDATA[A new <tt>InputParams</tt>.]]></Description></Returns><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The fully-qualified type name of the input event block consumes.]]></Description></Parameter></Parameters></Action><Action name="withFields" sortKey="static-1-withFields" staticNature=""><Description><![CDATA[Specify the fields that the block listens for.]]></Description><Summary><![CDATA[Specify the fields that the block listens for.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="InputParams"><Description><![CDATA[The <tt>InputParams</tt> with the fields value.]]></Description></Returns><Parameters><Parameter name="fields" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values.]]></Description></Parameter></Parameters></Action><Action name="withIsSync" sortKey="static-1-withIsSync" staticNature=""><Description><![CDATA[Specify whether the input is synchronous. An asynchronous input consumes the events but never triggers a new model evaluation from that input.]]></Description><Summary><![CDATA[Specify whether the input is synchronous. An asynchronous input consumes the events but never triggers a new model evaluation from that input.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="InputParams"><Description><![CDATA[The <tt>InputParams</tt> with the sync value set.]]></Description></Returns><Parameters><Parameter name="isSync" type="boolean"><Description><![CDATA[true if the input is syncnhronous, else false.]]></Description></Parameter></Parameters></Action><Action name="withPartition" sortKey="static-1-withPartition" staticNature=""><Description><![CDATA[Specify the value that identifies a partition of events.]]></Description><Summary><![CDATA[Specify the value that identifies a partition of events.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="InputParams"><Description><![CDATA[The <tt>InputParams</tt> with the partition value.]]></Description></Returns><Parameters><Parameter name="partitionValue" type="any"><Description><![CDATA[The partition value.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="JoinerHelper" private="true"><Description><![CDATA[Helper object for PromiseJoiner.]]></Description><Summary><![CDATA[Helper object for PromiseJoiner.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="index" private="true" type="integer"><TypeParameters/></Member><Member name="completedParams" private="true" type="dictionary"><Parameters><Parameter type="integer"/><Parameter type="any"/></Parameters><TypeParameters/></Member><Member name="count" private="true" type="integer"><TypeParameters/></Member><Member name="success" private="true" type="action"><Parameters><Parameter type="any"/></Parameters><TypeParameters/></Member><Member name="failure" private="true" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><TypeParameters/></Member><Action name="done" private="true" sortKey="static-1-done" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="v" type="any"/></Parameters></Action><Action name="onExcept" private="true" sortKey="static-1-onExcept" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="exception" type="com.apama.exceptions.Exception"/></Parameters></Action></Type><Type category="Event" name="L10N"><Description><![CDATA[API for the localization of an error message.

 Blocks should throw <tt>getLocalizedException("msgId", [params])</tt> (or the <tt>_basic</tt> equivalent), where parameters can be the result of <tt>getLocalized(..)</tt> (or <tt>_basic</tt> variant) (the use of <tt>throw</tt> in the block informs the compiler that the block is terminated).]]></Description><Summary><![CDATA[API for the localization of an error message.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="LOCALIZED_EXCEPTION" type="string" typeValue="&quot;LocalizedException&quot;"><Description><![CDATA[The Exception Type for localized exceptions]]></Description><Summary><![CDATA[The Exception Type for localized exceptions]]></Summary><TypeParameters/></Member><Member constant="true" name="MSG_ID" private="true" type="string" typeValue="&quot;msgId&quot;"><Description><![CDATA[Message ID property name in JSON.]]></Description><Summary><![CDATA[Message ID property name in JSON.]]></Summary><TypeParameters/></Member><Member constant="true" name="MSG_PARAMS" private="true" type="string" typeValue="&quot;msgParams&quot;"><Description><![CDATA[Message params property name in JSON.]]></Description><Summary><![CDATA[Message params property name in JSON.]]></Summary><TypeParameters/></Member><Action name="getLocalizedException" sortKey="static-0-getLocalizedException" staticNature="static "><Description><![CDATA[Get a localized exception with parameters.]]></Description><Summary><![CDATA[Get a localized exception with parameters.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="com.apama.exceptions.Exception"/><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[A message identifier.]]></Description></Parameter><Parameter name="params" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[A list of parameters - could be simple values (string, float, etc.) or the result from <tt>getLocalizedSubMsg</tt>.]]></Description></Parameter></Parameters></Action><Action name="getLocalizedException_basic" sortKey="static-0-getLocalizedException_basic" staticNature="static "><Description><![CDATA[Get a localized exception with no parameters.]]></Description><Summary><![CDATA[Get a localized exception with no parameters.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="com.apama.exceptions.Exception"/><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[A message identifier.]]></Description></Parameter></Parameters></Action><Action name="getLocalizedException_extra" sortKey="static-0-getLocalizedException_extra" staticNature="static "><Description><![CDATA[Get a localized exception with parameters and extra details.]]></Description><Summary><![CDATA[Get a localized exception with parameters and extra details.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="com.apama.exceptions.Exception"/><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[- a Message ID]]></Description></Parameter><Parameter name="params" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[- a list of parameters - could be simple values (string/ float/ etc) or result from getLocalizedSubMsg]]></Description></Parameter><Parameter name="extraDetails" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[- a dictionary of extraDetails]]></Description></Parameter></Parameters></Action><Action name="getLocalizedSubMsg" sortKey="static-0-getLocalizedSubMsg" staticNature="static "><Description><![CDATA[Get a localized sub-message.

 Get a sub-message that can be passed as a member of parameters to <tt>getLocalizedException</tt> or <tt>getLocalizedSubMsg</tt> recursively.]]></Description><Summary><![CDATA[Get a localized sub-message.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[A value that can be passed to <tt>getLocalizedException</tt> in parameters.]]></Description></Returns><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[A message identifier.]]></Description></Parameter><Parameter name="params" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[A list of parameters - could be simple values (string, float, etc.) or the result from <tt>getLocalizedSubMsg</tt>.]]></Description></Parameter></Parameters></Action><Action name="getLocalizedSubMsg_basic" sortKey="static-0-getLocalizedSubMsg_basic" staticNature="static "><Description><![CDATA[Get a localized sub-message.

 Get a sub-message that can be passed as a member of parameters to <tt>getLocalizedException</tt> or <tt>getLocalizedSubMsg</tt> recursively.]]></Description><Summary><![CDATA[Get a localized sub-message.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[A value that can be passed to <tt>getLocalizedException</tt> in parameters.]]></Description></Returns><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[A message identifier.]]></Description></Parameter></Parameters></Action><Action name="setExceptionStackTrace" sortKey="static-0-setExceptionStackTrace" staticNature="static "><Description><![CDATA[Copy stacktrace.

 Copy (strictly, append) the stacktrace from src to tgt.]]></Description><Summary><![CDATA[Copy stacktrace.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="com.apama.exceptions.Exception"><Description><![CDATA[tgt]]></Description></Returns><Parameters><Parameter name="tgt" type="com.apama.exceptions.Exception"><Description><![CDATA[- where to put the stacktrace.]]></Description></Parameter><Parameter name="src" type="com.apama.exceptions.Exception"><Description><![CDATA[- where to get the stacktrace from.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="LngLat"><Description><![CDATA[The event for a geofence property.]]></Description><Summary><![CDATA[The event for a geofence property.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="lng" type="float"><Description><![CDATA[Longitude.]]></Description><Summary><![CDATA[Longitude.]]></Summary><TypeParameters/></Member><Member name="lat" type="float"><Description><![CDATA[Latitude.]]></Description><Summary><![CDATA[Latitude.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="LocaleData" private="true"><Description><![CDATA[Register a generic locale entry.

 Typically used for the documentation and categories metadata.]]></Description><Summary><![CDATA[Register a generic locale entry.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="name" private="true" type="string"><Description><![CDATA[Filename (without .json suffix - e.g. documentation or categories]]></Description><Summary><![CDATA[Filename (without .json suffix - e.g. documentation or categories]]></Summary><TypeParameters/></Member><Member name="lang" private="true" type="string"><Description><![CDATA[Language]]></Description><Summary><![CDATA[Language]]></Summary><TypeParameters/></Member><Member name="jsonText" private="true" type="string"><Description><![CDATA[Contents in JSON form]]></Description><Summary><![CDATA[Contents in JSON form]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="ModelDeployed" private="true"><Description><![CDATA[Sent when a model deployment is attempted.

 Currently used for lazy initialization of some resources on first model deployement.  Expect exactly one ModelDeployedAck in response.]]></Description><Summary><![CDATA[Sent when a model deployment is attempted.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="id" private="true" type="integer"><TypeParameters/></Member><Member name="tenant" private="true" type="com.apama.cumulocity.TenantDetails"><TypeParameters/></Member><Member constant="true" name="CHANNEL" private="true" type="string" typeValue="&quot;AnalyticsModelDeployed&quot;"><TypeParameters/></Member><Action name="ack" private="true" sortKey="static-1-ack" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="promise" private="true" sortKey="static-0-promise" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="tenant" type="com.apama.cumulocity.TenantDetails"/></Parameters></Action><Action name="sendAndWaitForModelDeployed" private="true" sortKey="static-1-sendAndWaitForModelDeployed" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="success" type="action"><Parameters><Parameter type="any"/></Parameters></Parameter><Parameter name="failed" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters></Action></Type><Type category="Event" name="ModelDeployedAck" private="true"><Description><![CDATA[Sent when Cumulocity (or other external system) is subscribed and ready to process events.

 Expect this to be sent exactly once in response to ModelDeployed event, to the channel named in the ModelDeployed event.]]></Description><Summary><![CDATA[Sent when Cumulocity (or other external system) is subscribed and ready to process events.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="id" private="true" type="integer"><TypeParameters/></Member><Member constant="true" name="CHANNEL" private="true" type="string" typeValue="&quot;AnalyticsModelDeployedAck&quot;"><TypeParameters/></Member></Type><Type category="Event" name="ModelState" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="modelId" private="true" type="string"><Description><![CDATA[The ID of the model.]]></Description><Summary><![CDATA[The ID of the model.]]></Summary><TypeParameters/></Member><Member name="blocks" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter package="apama.analyticsbuilder" type="BlockConfiguration"/></Parameters><Description><![CDATA[Dictionary of all the block instances in the model. The keys in the dictionary are block IDs.]]></Description><Summary><![CDATA[Dictionary of all the block instances in the model. The keys in the dictionary are block IDs.]]></Summary><TypeParameters/></Member><Member name="wires" private="true" type="sequence"><Parameters><Parameter package="apama.analyticsbuilder" type="Wire"/></Parameters><Description><![CDATA[All of the wires.]]></Description><Summary><![CDATA[All of the wires.]]></Summary><TypeParameters/></Member><Member name="modelScopeParameters" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[Model scoped parameters.]]></Description><Summary><![CDATA[Model scoped parameters.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="NameValue"><Description><![CDATA[The event for a dynamic property.]]></Description><Summary><![CDATA[The event for a dynamic property.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="name" type="string"><Description><![CDATA[The name of the property.]]></Description><Summary><![CDATA[The name of the property.]]></Summary><TypeParameters/></Member><Member name="value" type="any"><Description><![CDATA[The value of the property.]]></Description><Summary><![CDATA[The value of the property.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="OutputHandler"><Description><![CDATA[A handler which is used for sending output events outside of the model.]]></Description><Summary><![CDATA[A handler which is used for sending output events outside of the model.]]></Summary><TypeParameters/><See action="producesOutput" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[To declare an output block which returns an output handler.]]></Description></See><Routes><Reference type="any"><Description><![CDATA[The output event if it is synchronous.]]></Description></Reference></Routes><Emits/><Enqueues/><Sends><Reference type="any"><Description><![CDATA[The output event to the output channel.]]></Description></Reference></Sends><Listens/><Spawns/><Member name="outputId" private="true" type="string"><Description><![CDATA[The input ID.]]></Description><Summary><![CDATA[The input ID.]]></Summary><TypeParameters/></Member><Member name="params" package="apama.analyticsbuilder" private="true" type="OutputParams"><Description><![CDATA[Output params object.]]></Description><Summary><![CDATA[Output params object.]]></Summary><TypeParameters/></Member><Member name="blockProfiled" private="true" type="action"><Parameters><Parameter type="integer"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="extraChannels" private="true" type="sequence"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[Sequence of extra worker channels to which output should be sent as well.]]></Description><Summary><![CDATA[Sequence of extra worker channels to which output should be sent as well.]]></Summary><TypeParameters/></Member><Member name="isBroadcast" private="true" type="boolean"><Description><![CDATA[True if the specified source device id is a broadcast device.]]></Description><Summary><![CDATA[True if the specified source device id is a broadcast device.]]></Summary><TypeParameters/></Member><Member name="isAsset" private="true" type="boolean"><Description><![CDATA[True if the specified source device id is an asset.]]></Description><Summary><![CDATA[True if the specified source device id is an asset.]]></Summary><TypeParameters/></Member><Action name="sendOutput" sortKey="static-1-sendOutput" staticNature=""><Description><![CDATA[Send the output event outside of the model to the specified channel.

 If the output is synchronous then it is routed internally for the consumption by other models and tagged before sending it outside.]]></Description><Summary><![CDATA[Send the output event outside of the model to the specified channel.]]></Summary><TypeParameters/><Routes><Reference type="any"><Description><![CDATA[The output event if it is synchronous.]]></Description></Reference></Routes><Emits/><Enqueues/><Sends><Reference type="any"><Description><![CDATA[The output event to the output channel.]]></Description></Reference></Sends><Listens/><Spawns/><Parameters><Parameter name="outputEvent" type="any"><Description><![CDATA[The output event to send.]]></Description></Parameter><Parameter name="channel" type="string"><Description><![CDATA[The channel on which to send the output event.]]></Description></Parameter><Parameter name="$activation" package="apama.analyticsbuilder" type="Activation"><Description><![CDATA[The current activation.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="OutputParams"><Description><![CDATA[Parameters for describing a stream of events produced by an output block.

 The combination of event type, field values, and partition value identifies the output stream. Two or more blocks in a single or across multiple models cannot produce synchronous output to the single output stream.

 This is typically used as: <pre>
OutputHandler outputHandler;
string modelName;

action $validate() {
	modelName := $modelScopeParameters[ABConstants.MODEL_NAME_IDENTIFIER].valueToString(); 
	OutputParams params := OutputParams.forSyncEventType(MyEvent.getName(), new dictionary<string,any>).withPartitionValue(source);
	outputHandler := $base.producesOutput(params);
}
action tagOutput(MyEvent e) {
	e.params[ABConstants.MODEL_NAME_IDENTIFIER] := modelName;
}
</pre>]]></Description><Summary><![CDATA[Parameters for describing a stream of events produced by an output block.]]></Summary><TypeParameters/><See action="producesOutput" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[To declare an output block.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="eventType" private="true" type="string"><Description><![CDATA[The event type that the block sends.]]></Description><Summary><![CDATA[The event type that the block sends.]]></Summary><TypeParameters/></Member><Member name="fields" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values that the block sends, which together with eventType and partitionValue, identify a stream of events.]]></Description><Summary><![CDATA[The field values that the block sends, which together with eventType and partitionValue, identify a stream of events.]]></Summary><TypeParameters/></Member><Member name="tagger" private="true" type="any"><Description><![CDATA[Call back action for tagging the output event before it is sent out.]]></Description><Summary><![CDATA[Call back action for tagging the output event before it is sent out.]]></Summary><TypeParameters/></Member><Member name="partitionValue" private="true" type="any"><Description><![CDATA[The value that identifies a partition of events.]]></Description><Summary><![CDATA[The value that identifies a partition of events.]]></Summary><TypeParameters/></Member><Member name="partitionField" private="true" type="string"><Description><![CDATA[The name of the field on the output event. If specified, current partition is set on the output event.]]></Description><Summary><![CDATA[The name of the field on the output event. If specified, current partition is set on the output event.]]></Summary><TypeParameters/></Member><Member name="isSync" private="true" type="boolean"><Description><![CDATA[Whether this output is synchronous or not.]]></Description><Summary><![CDATA[Whether this output is synchronous or not.]]></Summary><TypeParameters/></Member><Action name="forAsyncEventType" sortKey="static-0-forAsyncEventType" staticNature="static "><Description><![CDATA[Create a new <tt>OutputParams</tt> for asynchronous output values.

 Asynchronous output values are value which do not have source timestamp and can only be consumed by another model in a time-asynchronous manner when they are received back from the external system.]]></Description><Summary><![CDATA[Create a new <tt>OutputParams</tt> for asynchronous output values.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="OutputParams"><Description><![CDATA[A new <tt>OutputParams</tt>.]]></Description></Returns><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The fully-qualified type name of the output event block produces.]]></Description></Parameter></Parameters></Action><Action name="forSyncEventType" sortKey="static-0-forSyncEventType" staticNature="static "><Description><![CDATA[Create a new <tt>OutputParams</tt> for synchronous output values.

 Synchronous output values are values which have source timestamp and can be consumed by another model in a time-synchronous manner and can be processed by the model with any other data from the same timestamp.

 The synchronous output values are routed internally for the consumption of any consumer model before sending it outside. The output value may be received back in future. The value was already processed and must be ignored. This is achieved by adding a tag to the output event which is sent outside. The input blocks check for the presence of such tag and ignore an input event if the tag is present.]]></Description><Summary><![CDATA[Create a new <tt>OutputParams</tt> for synchronous output values.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="OutputParams"><Description><![CDATA[A new <tt>OutputParams</tt>.]]></Description></Returns><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The fully-qualified type name of the output event block produces.]]></Description></Parameter><Parameter name="fields" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values that the block sends.]]></Description></Parameter><Parameter name="tagger" type="any"><Description><![CDATA[The action to tag the output event before it is sent outside so that it is ignore by input blocks if received back in future. The action must take exactly one parameter of same type as <tt>eventType</tt> and must not return anything, for example, <tt>action tagOutput(MyEvent evt) {} </tt>.]]></Description></Parameter></Parameters></Action><Action name="withPartitionFields" sortKey="static-1-withPartitionFields" staticNature=""><Description><![CDATA[Specify the name of the field on the output event which should be set with the current partition if output is partitioned.]]></Description><Summary><![CDATA[Specify the name of the field on the output event which should be set with the current partition if output is partitioned.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="OutputParams"><Description><![CDATA[The <tt>OutputParams</tt> with the partition field.]]></Description></Returns><Parameters><Parameter name="partitionField" type="string"><Description><![CDATA[Name of the feild.]]></Description></Parameter></Parameters></Action><Action name="withPartitionValue" sortKey="static-1-withPartitionValue" staticNature=""><Description><![CDATA[Specify the value that identifies a partition of events.]]></Description><Summary><![CDATA[Specify the value that identifies a partition of events.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="OutputParams"><Description><![CDATA[The <tt>OutputParams</tt> with the partition value.]]></Description></Returns><Parameters><Parameter name="partitionValue" type="any"><Description><![CDATA[The partition value.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="Partition_Alias"><Description><![CDATA[Denotes an alias device.

 This is used in simulation mode and test mode to declare the real and virtual devices. In terms of checking for cycles and what model-to-model interactions are used, the <tt>realDevice</tt> member is used, but the block actually listens to events identified by the <tt>virtualDevice</tt> field.]]></Description><Summary><![CDATA[Denotes an alias device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="realDevice" type="any"><Description><![CDATA[Partition value of the real device. This is the partition that the model should be treated as consuming/sending for purposes of model-to-model interactions.]]></Description><Summary><![CDATA[Partition value of the real device. This is the partition that the model should be treated as consuming/sending for purposes of model-to-model interactions.]]></Summary><TypeParameters/></Member><Member name="virtualDevice" type="any"><Description><![CDATA[Partition value of the virtual device, which is present or that will be present in events.]]></Description><Summary><![CDATA[Partition value of the virtual device, which is present or that will be present in events.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Partition_Asset" private="true"><Description><![CDATA[Special partition for output blocks When a Asset is selected.]]></Description><Summary><![CDATA[Special partition for output blocks When a Asset is selected.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="asset" private="true" type="any"><Description><![CDATA[Identifier of group.]]></Description><Summary><![CDATA[Identifier of group.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Partition_Broadcast"><Description><![CDATA[Special partition for blocks/data that applies to all partitions.]]></Description><Summary><![CDATA[Special partition for blocks/data that applies to all partitions.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="partition" type="any"><Description><![CDATA[Identifier of potentially multiple distinct broadcast values.]]></Description><Summary><![CDATA[Identifier of potentially multiple distinct broadcast values.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Partition_Combined" private="true"><Description><![CDATA[Special partition for publishing combined group aggregate data.

 Currently used by GroupStatistics block to publish aggegate to this partition in addition to existing device partitons. The output block then publishes the data from this partition to an asset in a partitioned model.]]></Description><Summary><![CDATA[Special partition for publishing combined group aggregate data.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Type><Type category="Event" name="Partition_Default"><Description><![CDATA[Denotes a default partition.  This is used if the model does not execute different partitions independently from each other.

 In the Cumulocity input blocks, this is used if they are configured with a device, not a device group.]]></Description><Summary><![CDATA[Denotes a default partition.  This is used if the model does not execute different partitions independently from each other.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Type><Type category="Event" name="Partition_Grouped" private="true"><Description><![CDATA[Special partition for specifying worker while keeping state partitioned.

 For now, this is an undocumented feature, thus private.]]></Description><Summary><![CDATA[Special partition for specifying worker while keeping state partitioned.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="worker" private="true" type="any"><Description><![CDATA[which worker to associate with.

 This can be any type - the value is hashed to determine which worker.]]></Description><Summary><![CDATA[which worker to associate with.]]></Summary><TypeParameters/></Member><Member name="partition" private="true" type="any"><Description><![CDATA[identifier of potentially multiple distinct partition values.]]></Description><Summary><![CDATA[identifier of potentially multiple distinct partition values.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Partition_Wildcard"><Description><![CDATA[Special partition for blocks that apply to any partition. A block input or output applies to multiple partition values (for example, used for input/output configured with device groups).]]></Description><Summary><![CDATA[Special partition for blocks that apply to any partition. A block input or output applies to multiple partition values (for example, used for input/output configured with device groups).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Type><Type category="Event" name="Partitioner" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="numWorkers" private="true" type="optional"><Parameters><Parameter type="integer"/></Parameters><TypeParameters/></Member><Member constant="true" name="CONTEXT_PREFIX" private="true" type="string" typeValue="&quot;analyticsbuilder.Worker_&quot;"><TypeParameters/></Member><Member constant="true" name="WORKER_PREFIX" private="true" type="string" typeValue="&quot;analyticsbuilder.worker_&quot;"><TypeParameters/></Member><Member constant="true" name="ALL_WORKERS" private="true" type="string" typeValue="&quot;analyticsbuilder.allWorkers&quot;"><TypeParameters/></Member><Action name="deAlias" private="true" sortKey="static-0-deAlias" staticNature="static "><Description><![CDATA[Strip out <tt>Partition_Alias</tt> to return the real device.

 If not a <tt>Partition_Alias</tt>, return the partition value as is.]]></Description><Summary><![CDATA[Strip out <tt>Partition_Alias</tt> to return the real device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="p" type="any"/></Parameters></Action><Action name="deAlias_actualDevice" private="true" sortKey="static-0-deAlias_actualDevice" staticNature="static "><Description><![CDATA[Strip out <tt>Partition_Alias</tt> to return the actual device.

 If not a <tt>Partition_Alias</tt>, return the partition value as is.]]></Description><Summary><![CDATA[Strip out <tt>Partition_Alias</tt> to return the actual device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="p" type="any"/></Parameters></Action><Action name="get" private="true" sortKey="static-0-get" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Partitioner"/></Action><Action name="getChannelForWorker" private="true" sortKey="static-0-getChannelForWorker" staticNature="static "><Description><![CDATA[Get a channel to send events to for a partition]]></Description><Summary><![CDATA[Get a channel to send events to for a partition]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="workerId" type="integer"/></Parameters></Action><Action name="getChannelsForWorkers" private="true" sortKey="static-0-getChannelsForWorkers" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="string"/></Parameters></Returns><Parameters><Parameter name="workers" type="sequence"><Parameters><Parameter type="integer"/></Parameters></Parameter></Parameters></Action><Action name="getDevicesOnWorker" private="true" sortKey="static-1-getDevicesOnWorker" staticNature=""><Description><![CDATA[Returns devices that should be handled by this worker.]]></Description><Summary><![CDATA[Returns devices that should be handled by this worker.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="sequence"><Parameters><Parameter type="string"/></Parameters></Returns><Parameters><Parameter name="devices" type="sequence"><Parameters><Parameter type="string"/></Parameters></Parameter><Parameter name="contextName" type="string"/></Parameters></Action><Action name="getNumWorkers" private="true" sortKey="static-1-getNumWorkers" staticNature=""><Description><![CDATA[Get the number of workers.]]></Description><Summary><![CDATA[Get the number of workers.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="getWorkerChannelFor" private="true" sortKey="static-1-getWorkerChannelFor" staticNature=""><Description><![CDATA[Get a channel to for a partition]]></Description><Summary><![CDATA[Get a channel to for a partition]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="partition" type="any"/></Parameters></Action><Action name="getWorkerFor" private="true" sortKey="static-1-getWorkerFor" staticNature=""><Description><![CDATA[Get which worker identifier should handle a partition]]></Description><Summary><![CDATA[Get which worker identifier should handle a partition]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="partition" type="any"/></Parameters></Action><Action name="isAlias" private="true" sortKey="static-0-isAlias" staticNature="static "><Description><![CDATA[Check if partition is <tt>Partition_Alias</tt>.]]></Description><Summary><![CDATA[Check if partition is <tt>Partition_Alias</tt>.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="p" type="any"/></Parameters></Action></Type><Type category="Event" name="Promise"><Description><![CDATA[An asynchronous promise result.

 A <tt>Promise</tt> represents something that may be fulfilled (with an <tt>any</tt> value) or rejected (with an <tt>Exception</tt>) later. <tt>Promise</tt> objects can be chained, to make linear asynchronous chains of calls. The 'then' methods (<tt>andThen</tt>, <tt>thenOrCatch</tt>) take an action which returns an <tt>any</tt> - if that <tt>any</tt> is a <tt>Promise</tt>, then it is waited on until any 'then' actions are called.

 A <tt>Promise</tt> is created with the static <tt>create</tt> action, which takes an <tt>fn</tt> action to call. The fulfill and reject actions are passed to this function (this pattern ensures that exceptions thrown by the <tt>fn</tt> action are caught and the <tt>Promise</tt> is rejected).]]></Description><Summary><![CDATA[An asynchronous promise result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="returnValue" private="true" type="any"><Description><![CDATA[The return value, if there is one.]]></Description><Summary><![CDATA[The return value, if there is one.]]></Summary><TypeParameters/></Member><Member name="settled" private="true" type="integer"><Description><![CDATA[Promise is fulfilled or has been rejected. One of the SETTLED_ constants]]></Description><Summary><![CDATA[Promise is fulfilled or has been rejected. One of the SETTLED_ constants]]></Summary><TypeParameters/></Member><Member constant="true" name="SETTLED_NONE" private="true" type="integer" typeValue="0"><Description><![CDATA[Not settled yet.]]></Description><Summary><![CDATA[Not settled yet.]]></Summary><TypeParameters/></Member><Member constant="true" name="SETTLED_PROMISE" private="true" type="integer" typeValue="1"><Description><![CDATA[Settled, but with a promise.]]></Description><Summary><![CDATA[Settled, but with a promise.]]></Summary><TypeParameters/></Member><Member constant="true" name="SETTLED_VALUE" private="true" type="integer" typeValue="2"><Description><![CDATA[Settled, with a value (or an exception).]]></Description><Summary><![CDATA[Settled, with a value (or an exception).]]></Summary><TypeParameters/></Member><Member name="exception" private="true" type="optional"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Description><![CDATA[The exception if failed.]]></Description><Summary><![CDATA[The exception if failed.]]></Summary><TypeParameters/></Member><Member name="chain" private="true" type="sequence"><Parameters><Parameter package="apama.analyticsbuilder" type="PromiseChainEntry"/></Parameters><Description><![CDATA[The callbakcs registered against this promise.]]></Description><Summary><![CDATA[The callbakcs registered against this promise.]]></Summary><TypeParameters/></Member><Action name="_deferIfPromise" private="true" sortKey="static-1-_deferIfPromise" staticNature=""><Description><![CDATA[Set return value or defer if it is a promise.

 If value is another Promise, we chain ourselves to that promise - i.e. we are done when it is.

 This must not be called directly by users (it leaves the promise in a partly resolved state).]]></Description><Summary><![CDATA[Set return value or defer if it is a promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[true if we deferred (end of synchronous processing), false if the return value is set and we can continue synchronously.]]></Description></Returns><Parameters><Parameter name="value" type="any"/></Parameters></Action><Action name="_doCatch" private="true" sortKey="static-1-_doCatch" staticNature=""><Description><![CDATA[Previous promise is rejected.

 Calls our 'boundCatch' if set, and the resolves the next promise. Rejects next promise if boundCatch throws or if boundCatch is empty.]]></Description><Summary><![CDATA[Previous promise is rejected.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="ex" type="com.apama.exceptions.Exception"/><Parameter name="boundCatch" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Returns type="any"/></Parameter></Parameters></Action><Action name="_doThen" private="true" sortKey="static-1-_doThen" staticNature=""><Description><![CDATA[Previous promise is fulfilled.

 Calls our 'boundThen' if set, and then resolves the next promise. Rejects next promise on an exception.]]></Description><Summary><![CDATA[Previous promise is fulfilled.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="result" type="any"/><Parameter name="boundThen" type="action"><Parameters><Parameter type="any"/></Parameters><Returns type="any"/></Parameter></Parameters></Action><Action name="_fulfill" private="true" sortKey="static-1-_fulfill" staticNature=""><Description><![CDATA[Fulfills this promise.

 If value is another Promise, we chain ourselves to that promise - i.e. we are done when it is.

 This must not be called directly by users (we don't trust them to call it only once).]]></Description><Summary><![CDATA[Fulfills this promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="any"/></Parameters></Action><Action name="_fulfill_return" private="true" sortKey="static-1-_fulfill_return" staticNature=""><Description><![CDATA[Fulfill the promise from another promise.

 Convenience variant that returns new any. Used only in deferIfPromise to convert a promise to a newer value (may be another promise or value)]]></Description><Summary><![CDATA[Fulfill the promise from another promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="value" type="any"/></Parameters></Action><Action name="_nowSettled" private="true" sortKey="static-1-_nowSettled" staticNature=""><Description><![CDATA[This promise is now settled.

 Called from reject/ fulfill (once it has a non-promise value).

 This attempts to call chained promises.

 The common case, a single chained promise, is handled iteratively, to avoid stack overflow.  Once we get to an asynchronous result (a Promise) this returns. If we come across Promise with something other than one chained promise (including none- the end of the promise chain), then we switch to recursive; we expect this to be rare.]]></Description><Summary><![CDATA[This promise is now settled.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="_reject" private="true" sortKey="static-1-_reject" staticNature=""><Description><![CDATA[Reject this promise.

 Only]]></Description><Summary><![CDATA[Reject this promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="e" type="com.apama.exceptions.Exception"/></Parameters></Action><Action name="_reject_return" private="true" sortKey="static-1-_reject_return" staticNature=""><Description><![CDATA[Reject the promise.

 Convenience variant that returns new any.]]></Description><Summary><![CDATA[Reject the promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="value" type="com.apama.exceptions.Exception"/></Parameters></Action><Action name="_throwIfSettled" sortKey="static-1-_throwIfSettled" staticNature=""><Description><![CDATA[Throw an exception if the promise is already settled.]]></Description><Summary><![CDATA[Throw an exception if the promise is already settled.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="andCatch" sortKey="static-1-andCatch" staticNature=""><Description><![CDATA[Catch an asynchronous exception.

 Executes the callback if this <tt>Promise</tt> is rejected.]]></Description><Summary><![CDATA[Catch an asynchronous exception.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"><Description><![CDATA[A <tt>Promise</tt> of the result of the callback method (or this <tt>Promise</tt> value if it is not rejected).]]></Description></Returns><Parameters><Parameter name="cb" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Returns type="any"/><Description><![CDATA[Called if the <tt>Promise</tt> is rejected.]]></Description></Parameter></Parameters></Action><Action name="andThen" sortKey="static-1-andThen" staticNature=""><Description><![CDATA[Execute a function after this <tt>Promise</tt> is completed.

 Executes the callback once this <tt>Promise</tt> is fulfilled with a real (non-<tt>Promise</tt>) value.  Returns a <tt>Promise</tt> of the result of the callback (or the result of the result of the callback if it is a <tt>Promise</tt>).]]></Description><Summary><![CDATA[Execute a function after this <tt>Promise</tt> is completed.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"><Description><![CDATA[A <tt>Promise</tt> of the result of the callback method (or rejected on exception).]]></Description></Returns><Parameters><Parameter name="cb" type="action"><Parameters><Parameter type="any"/></Parameters><Returns type="any"/><Description><![CDATA[Callback called when the <tt>Promise</tt> is fulfilled.]]></Description></Parameter></Parameters></Action><Action name="create" sortKey="static-0-create" staticNature="static "><Description><![CDATA[Create a promise based on an action which accepts callback arguments (done, fail).

 The function is called immediately, but it may call the <tt>any</tt> or <tt>Exception</tt> function at any point in the future. Only the first call is used.  Calling the first function with a <tt>Promise</tt> will wait for that to be fulfilled before fulfilling this promise.]]></Description><Summary><![CDATA[Create a promise based on an action which accepts callback arguments (done, fail).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="func" type="action"><Parameters><Parameter type="action"><Parameters><Parameter type="any"/></Parameters></Parameter><Parameter type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters><Description><![CDATA[Function to compute the promise value, setting the value by calling one of the two function parameters.]]></Description></Parameter></Parameters></Action><Action name="fail" private="true" sortKey="static-1-fail" staticNature=""><Description><![CDATA[Fail the promise.

 If the promise is already settled, an exception is thrown because a promise cannot be settled more than once.]]></Description><Summary><![CDATA[Fail the promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="ex" type="com.apama.exceptions.Exception"/></Parameters></Action><Action name="fulfill" private="true" sortKey="static-1-fulfill" staticNature=""><Description><![CDATA[Fulfill the promise.

 If the value is another Promise, we chain ourselves to that promise, i.e. we are done when the other promise is done.

 If the promise is already settled, an exception is thrown because a promise cannot be settled more than once.]]></Description><Summary><![CDATA[Fulfill the promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="any"/></Parameters></Action><Action name="reject" sortKey="static-0-reject" staticNature="static "><Description><![CDATA[Convert an <tt>Exception</tt> into a rejected <tt>Promise</tt>.]]></Description><Summary><![CDATA[Convert an <tt>Exception</tt> into a rejected <tt>Promise</tt>.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="e" type="com.apama.exceptions.Exception"><Description><![CDATA[An <tt>Exception</tt> describing the failure.]]></Description></Parameter></Parameters></Action><Action name="resolve" sortKey="static-0-resolve" staticNature="static "><Description><![CDATA[Convert a <tt>Promise</tt> or a value which is not a <tt>Promise</tt> into a <tt>Promise</tt>.

 Can be used to convert synchronous bare values into asynchronous <tt>Promise</tt> objects.]]></Description><Summary><![CDATA[Convert a <tt>Promise</tt> or a value which is not a <tt>Promise</tt> into a <tt>Promise</tt>.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="value" type="any"><Description><![CDATA[The <tt>Promise</tt> to resolve the <tt>Promise</tt> to, or if it is a <tt>Promise</tt>, to get the result from.]]></Description></Parameter></Parameters></Action><Action name="thenOrCatch" private="true" sortKey="static-1-thenOrCatch" staticNature=""><Description><![CDATA[Execute a function after this promise is completed.

 Executes onThen or onCatch once this promise is fulfilled or rejected Returns a Promise of the result of onThen or onCatch (or a rejected promise if an uncaught exception occurs).]]></Description><Summary><![CDATA[Execute a function after this promise is completed.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"><Description><![CDATA[a Promise of the result of the cb method (or rejected on exception)]]></Description></Returns><Parameters><Parameter name="onThen" type="action"><Parameters><Parameter type="any"/></Parameters><Returns type="any"/><Description><![CDATA[optional action to call when this promise is fulfilled with a concrete value.]]></Description></Parameter><Parameter name="onCatch" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Returns type="any"/><Description><![CDATA[optional action to call when this promise is rejected.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="PromiseChainEntry" private="true"><Description><![CDATA[A registered callback for a promise.

 Each promise stores the promises that follow it and have been returned by andThen or andCatch.]]></Description><Summary><![CDATA[A registered callback for a promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="promise" private="true" type="any"><Description><![CDATA[Next promise (must be any because we can't do forward types..)]]></Description><Summary><![CDATA[Next promise (must be any because we can't do forward types..)]]></Summary><TypeParameters/></Member><Member name="boundThen" private="true" type="action"><Parameters><Parameter type="any"/></Parameters><Returns type="any"/><Description><![CDATA[andThen callback.

 Optional - callback for this 'then' entry in the promise chain, if set.]]></Description><Summary><![CDATA[andThen callback.]]></Summary><TypeParameters/></Member><Member name="boundCatch" private="true" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Returns type="any"/><Description><![CDATA[andCatch callback.

 Optional - callback for this 'catch' entry in the promose chain, if set.]]></Description><Summary><![CDATA[andCatch callback.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="PromiseJoiner"><Description><![CDATA[Helper object for joining promises.]]></Description><Summary><![CDATA[Helper object for joining promises.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="promises" private="true" type="sequence"><Parameters><Parameter package="apama.analyticsbuilder" type="Promise"/></Parameters><Description><![CDATA[Inputs.]]></Description><Summary><![CDATA[Inputs.]]></Summary><TypeParameters/></Member><Action name="doJoin" private="true" sortKey="static-1-doJoin" staticNature=""><Description><![CDATA[Implementation of joinAll.]]></Description><Summary><![CDATA[Implementation of joinAll.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="success" type="action"><Parameters><Parameter type="any"/></Parameters></Parameter><Parameter name="failure" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters></Action><Action name="joinAll" sortKey="static-0-joinAll" staticNature="static "><Description><![CDATA[Waits for all promises,

 Yields a promise which will yield a result of a sequence of all of the promise results once they are completed. If any throw, the returned promise will throw.]]></Description><Summary><![CDATA[Waits for all promises,]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="promises" type="sequence"><Parameters><Parameter package="apama.analyticsbuilder" type="Promise"/></Parameters></Parameter></Parameters></Action><Action name="pickFirst" sortKey="static-0-pickFirst" staticNature="static "><Description><![CDATA[Promise-chainable action to return the first result of a sequence.]]></Description><Summary><![CDATA[Promise-chainable action to return the first result of a sequence.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="v" type="any"/></Parameters></Action></Type><Type category="Event" name="PromiseReturner"><Description><![CDATA[Helper class for handling promises.

 A promiseReturner ignores the promise's previous value and returns (or throws) a new value. Usage: <pre> promise.andThen(PromiseReturner.create(object).andReturn) </pre> This will wait for promise to complete, then ignore it's return value and return object.]]></Description><Summary><![CDATA[Helper class for handling promises.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="obj" type="any"><Description><![CDATA[The bound object to return.]]></Description><Summary><![CDATA[The bound object to return.]]></Summary><TypeParameters/></Member><Action name="andReturn" sortKey="static-1-andReturn" staticNature=""><Description><![CDATA[Promise-compatible action chain that will return the obj this PromiseReturner was created with.

 The incoming value is discarded.]]></Description><Summary><![CDATA[Promise-compatible action chain that will return the obj this PromiseReturner was created with.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="incoming" type="any"/></Parameters></Action><Action name="andThrow" sortKey="static-1-andThrow" staticNature=""><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="incoming" type="any"/></Parameters></Action><Action name="create" sortKey="static-0-create" staticNature="static "><Description><![CDATA[Create a promise returner with the specified object.]]></Description><Summary><![CDATA[Create a promise returner with the specified object.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="PromiseReturner"/><Parameters><Parameter name="obj" type="any"/></Parameters></Action></Type><Type category="Event" name="RequestForwarding"><Description><![CDATA[Request forwarding of an event type to workers.]]></Description><Summary><![CDATA[Request forwarding of an event type to workers.]]></Summary><TypeParameters/><Routes><Reference package="apama.analyticsbuilder" type="RequestForwarding"/></Routes><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="eventTypeFQ" private="true" type="string"><Description><![CDATA[Fully qualified name of an event type.]]></Description><Summary><![CDATA[Fully qualified name of an event type.]]></Summary><TypeParameters/></Member><Member name="keyField" private="true" type="optional"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[Key field.

 Which top-level field of the event is the partition value.]]></Description><Summary><![CDATA[Key field.]]></Summary><TypeParameters/></Member><Action name="byKey" sortKey="static-0-byKey" staticNature="static "><Description><![CDATA[Request forwarding of an event type partitioned by the specified key field to workers.

 Must be called in the main context (that is, from a <tt>$validate</tt> call).]]></Description><Summary><![CDATA[Request forwarding of an event type partitioned by the specified key field to workers.]]></Summary><TypeParameters/><Routes><Reference package="apama.analyticsbuilder" type="RequestForwarding"/></Routes><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="evt" type="any"><Description><![CDATA[An instance of the event to forward.]]></Description></Parameter><Parameter name="field" type="string"><Description><![CDATA[The name of the field to partition by.]]></Description></Parameter></Parameters></Action><Action name="unpartitioned" sortKey="static-0-unpartitioned" staticNature="static "><Description><![CDATA[Request forwarding of an event type to workers, without any partitioning.

 Must be called in the main context (that is, from a <tt>$validate</tt> call).]]></Description><Summary><![CDATA[Request forwarding of an event type to workers, without any partitioning.]]></Summary><TypeParameters/><Routes><Reference package="apama.analyticsbuilder" type="RequestForwarding"/></Routes><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="evt" type="any"><Description><![CDATA[A prototype of the event to forward.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="SlowSystemWarning"><Description><![CDATA[Utility that measures the time taken for some procedure that are asynchronous but expected to be fast. It continuously logs warnings if it's taking too long. Helps with diagnostics, especially when developing and debugging new blocks (or in the Promises for them).]]></Description><Summary><![CDATA[Utility that measures the time taken for some procedure that are asynchronous but expected to be fast. It continuously logs warnings if it's taking too long. Helps with diagnostics, especially when developing and debugging new blocks (or in the Promises for them).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="description" private="true" type="string"><Description><![CDATA[Description of the procedure.]]></Description><Summary><![CDATA[Description of the procedure.]]></Summary><TypeParameters/></Member><Member name="timeoutSeconds" private="true" type="float"><Description><![CDATA[Current timeout until the next warning. Exponential increases each time, to a cap.]]></Description><Summary><![CDATA[Current timeout until the next warning. Exponential increases each time, to a cap.]]></Summary><TypeParameters/></Member><Member name="elapsedSeconds" type="float"><Description><![CDATA[Total time elapsed since the start.@private]]></Description><Summary><![CDATA[Total time elapsed since the start.@private]]></Summary><TypeParameters/></Member><Member name="timeoutListener" private="true" type="listener"><Description><![CDATA[Listener for the next warning.]]></Description><Summary><![CDATA[Listener for the next warning.]]></Summary><TypeParameters/></Member><Action name="done" sortKey="static-1-done" staticNature=""><Description><![CDATA[Call when the procedure is done, cleans up]]></Description><Summary><![CDATA[Call when the procedure is done, cleans up]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="setupListener" private="true" sortKey="static-1-setupListener" staticNature=""><Description><![CDATA[Called to set up the (next) timer for a warning.]]></Description><Summary><![CDATA[Called to set up the (next) timer for a warning.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="start" sortKey="static-0-start" staticNature="static "><Description><![CDATA[Create and start a timer for a procedure of the given description]]></Description><Summary><![CDATA[Create and start a timer for a procedure of the given description]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="SlowSystemWarning"/><Parameters><Parameter name="description" type="string"/></Parameters></Action></Type><Type category="Event" name="TemplateParameterDefinition"><Description><![CDATA[A template parameter on a model.

 This describes a template parameter, which defines the name, type and an optional default value for template parameters.  Template parameters can be provided when a model is activated.]]></Description><Summary><![CDATA[A template parameter on a model.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="id" type="string"><Description><![CDATA[Unique ID of a template parameter]]></Description><Summary><![CDATA[Unique ID of a template parameter]]></Summary><TypeParameters/></Member><Member name="name" type="string"><Description><![CDATA[User-provided name of a template parameter]]></Description><Summary><![CDATA[User-provided name of a template parameter]]></Summary><TypeParameters/></Member><Member name="type" type="string"><Description><![CDATA[Type of the parameter]]></Description><Summary><![CDATA[Type of the parameter]]></Summary><TypeParameters/></Member><Member name="defaultValue" type="any"><Description><![CDATA[Default value (optional)]]></Description><Summary><![CDATA[Default value (optional)]]></Summary><TypeParameters/></Member><Member name="#optional" type="boolean"><Description><![CDATA[Whether this is optional or not]]></Description><Summary><![CDATA[Whether this is optional or not]]></Summary><TypeParameters/></Member><Action name="getNameOrId" sortKey="static-1-getNameOrId" staticNature=""><Description><![CDATA[Gets name (or the ID of no name set)]]></Description><Summary><![CDATA[Gets name (or the ID of no name set)]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action></Type><Type category="Event" name="TemplateReference"><Description><![CDATA[The event for Template Reference]]></Description><Summary><![CDATA[The event for Template Reference]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="id" type="string"><TypeParameters/></Member></Type><Type category="Event" name="TimerHandle"><Description><![CDATA[A handle to a created timer.]]></Description><Summary><![CDATA[A handle to a created timer.]]></Summary><TypeParameters/><See action="cancelTimer" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[Use this action to cancel the timer.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="id" type="string"><Description><![CDATA[The unique identifier of the timer.]]></Description><Summary><![CDATA[The unique identifier of the timer.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="TimerParams"><Description><![CDATA[Parameters for creating a timer.]]></Description><Summary><![CDATA[Parameters for creating a timer.]]></Summary><TypeParameters/><See action="createTimerWith" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[Use this action to create a timer with the parameters.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="payload" private="true" type="any"><Description><![CDATA[The payload which will be passed when calling $timerTriggered action after the timer is triggered.]]></Description><Summary><![CDATA[The payload which will be passed when calling $timerTriggered action after the timer is triggered.]]></Summary><TypeParameters/></Member><Member name="inputId" private="true" type="string"><Description><![CDATA[inputId of the block]]></Description><Summary><![CDATA[inputId of the block]]></Summary><TypeParameters/></Member><Member name="time" private="true" type="float"><Description><![CDATA[The timer time. The exact interpretation of the value depends on the mode.]]></Description><Summary><![CDATA[The timer time. The exact interpretation of the value depends on the mode.]]></Summary><TypeParameters/></Member><Member name="mode" private="true" type="integer"><Description><![CDATA[The timer mode.]]></Description><Summary><![CDATA[The timer mode.]]></Summary><TypeParameters/></Member><Member name="partition" private="true" type="any"><Description><![CDATA[The partition value.]]></Description><Summary><![CDATA[The partition value.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_RELATIVE" private="true" type="integer" typeValue="0"><Description><![CDATA[The relative mode for the timer.]]></Description><Summary><![CDATA[The relative mode for the timer.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_ABSOLUTE" private="true" type="integer" typeValue="1"><Description><![CDATA[The absolute mode for the time.]]></Description><Summary><![CDATA[The absolute mode for the time.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_RECURRING" private="true" type="integer" typeValue="2"><Description><![CDATA[The recurring timer mode.]]></Description><Summary><![CDATA[The recurring timer mode.]]></Summary><TypeParameters/></Member><Action name="absolute" sortKey="static-0-absolute" staticNature="static "><Description><![CDATA[Create a <tt>TimerParams</tt> for creating a timer for an absolute time.

 The maximum time delay possible for input events is taken into account when determining the actual trigger time.]]></Description><Summary><![CDATA[Create a <tt>TimerParams</tt> for creating a timer for an absolute time.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[A new <tt>TimerParams</tt> for creating a timer for an absolute time.]]></Description></Returns><Parameters><Parameter name="timeSec" type="float"><Description><![CDATA[The absolute time in seconds at which the timer should be triggered.]]></Description></Parameter></Parameters></Action><Action name="recurring" sortKey="static-0-recurring" staticNature="static "><Description><![CDATA[Create a <tt>TimerParams</tt> for creating a recurring timer.

 The timer is triggered at the specified interval, in seconds.]]></Description><Summary><![CDATA[Create a <tt>TimerParams</tt> for creating a recurring timer.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[A new <tt>TimerParams</tt> for creating a recurring timer.]]></Description></Returns><Parameters><Parameter name="intervalSec" type="float"><Description><![CDATA[The interval in seconds.]]></Description></Parameter></Parameters></Action><Action name="relative" sortKey="static-0-relative" staticNature="static "><Description><![CDATA[Create a <tt>TimerParams</tt> for creating a timer for a relative time.

 The timer is triggered after the specified duration, starting from the timer creation time.]]></Description><Summary><![CDATA[Create a <tt>TimerParams</tt> for creating a timer for a relative time.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[A new <tt>TimerParams</tt> for creating a timer for a relative time.]]></Description></Returns><Parameters><Parameter name="durationSec" type="float"><Description><![CDATA[The duration in seconds after which the timer should be triggered.]]></Description></Parameter></Parameters></Action><Action name="withInputId" sortKey="static-1-withInputId" staticNature=""><Description><![CDATA[Specify the input identifier which will be supplied back when the <tt>$timerTriggered</tt> action is called.]]></Description><Summary><![CDATA[Specify the input identifier which will be supplied back when the <tt>$timerTriggered</tt> action is called.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[The <tt>TimerParams</tt> with the input identifier.]]></Description></Returns><Parameters><Parameter name="inputId" type="string"><Description><![CDATA[An input ID</tt>]]></Description></Parameter></Parameters></Action><Action name="withPartition" sortKey="static-1-withPartition" staticNature=""><Description><![CDATA[Specify the partition which will be supplied back when the <tt>$timerTriggered</tt> action is called. Defaults to empty.]]></Description><Summary><![CDATA[Specify the partition which will be supplied back when the <tt>$timerTriggered</tt> action is called. Defaults to empty.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[The <tt>TimerParams</tt> with the partition value.]]></Description></Returns><Parameters><Parameter name="partition" type="any"><Description><![CDATA[The partition.]]></Description></Parameter></Parameters></Action><Action name="withPayload" sortKey="static-1-withPayload" staticNature=""><Description><![CDATA[Specify the payload which will be supplied back when the <tt>$timerTriggered</tt> action is called.]]></Description><Summary><![CDATA[Specify the payload which will be supplied back when the <tt>$timerTriggered</tt> action is called.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[The <tt>TimerParams</tt> with the payload.]]></Description></Returns><Parameters><Parameter name="payload" type="any"><Description><![CDATA[The payload data.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="TypeConverter"><Description><![CDATA[Type converter helper event for consistently converting from one type to another.

 The toType() actions obey the conversions in the Analytics Builder documentation. The valueToType() actions delve deeper and attempt to convert the contents of a string or any.]]></Description><Summary><![CDATA[Type converter helper event for consistently converting from one type to another.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="TRUE" type="string" typeValue="&quot;true&quot;"><TypeParameters/></Member><Member constant="true" name="FALSE" type="string" typeValue="&quot;false&quot;"><TypeParameters/></Member><Member constant="true" name="BOOLEAN" type="string" typeValue="&quot;boolean&quot;"><TypeParameters/></Member><Member constant="true" name="FLOAT" type="string" typeValue="&quot;float&quot;"><TypeParameters/></Member><Member constant="true" name="STRING" type="string" typeValue="&quot;string&quot;"><TypeParameters/></Member><Action name="_commonToBoolean" private="true" sortKey="static-0-_commonToBoolean" staticNature="static "><Description><![CDATA[The common conversion functionality for toBoolean conversions, i.e. not the string type. Split out as it's easier to read the string specific stuff in isolation.]]></Description><Summary><![CDATA[The common conversion functionality for toBoolean conversions, i.e. not the string type. Split out as it's easier to read the string specific stuff in isolation.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="a" type="any"/></Parameters></Action><Action name="_stringToBoolean" private="true" sortKey="static-0-_stringToBoolean" staticNature="static "><Description><![CDATA[Common string to boolean conversion. Throws if unable to convert.]]></Description><Summary><![CDATA[Common string to boolean conversion. Throws if unable to convert.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="s" type="string"/></Parameters></Action><Action name="_stringToFloat" private="true" sortKey="static-0-_stringToFloat" staticNature="static "><Description><![CDATA[Common string to  float conversion. Throws if unable to convert.]]></Description><Summary><![CDATA[Common string to  float conversion. Throws if unable to convert.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/><Parameters><Parameter name="s" type="string"/></Parameters></Action><Action name="_tidy" private="true" sortKey="static-0-_tidy" staticNature="static "><Description><![CDATA[Common tidy function for a string, prior to type conversion.]]></Description><Summary><![CDATA[Common tidy function for a string, prior to type conversion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="s" type="string"/></Parameters></Action><Action name="fromString" sortKey="static-0-fromString" staticNature="static "><Description><![CDATA[Converts a string into the type and returns the result within an any.]]></Description><Summary><![CDATA[Converts a string into the type and returns the result within an any.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="s" type="string"/><Parameter name="type" type="string"/></Parameters></Action><Action name="toBoolean" sortKey="static-0-toBoolean" staticNature="static "><Description><![CDATA[Converts an any to a boolean. As per the Analytics Builder documentation, any non-empty or non-zero value results in a true result.]]></Description><Summary><![CDATA[Converts an any to a boolean. As per the Analytics Builder documentation, any non-empty or non-zero value results in a true result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="a" type="any"/></Parameters></Action><Action name="toFloat" sortKey="static-0-toFloat" staticNature="static "><Description><![CDATA[Converts an any to a float. As per the Analytics Builder documentation, a string type cannot be cast to a float and an exception will be thrown.]]></Description><Summary><![CDATA[Converts an any to a float. As per the Analytics Builder documentation, a string type cannot be cast to a float and an exception will be thrown.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/><Parameters><Parameter name="a" type="any"/></Parameters></Action><Action name="toValue" sortKey="static-0-toValue" staticNature="static "><Description><![CDATA[Converts the any to a Value object. The any will be set as the value of the Value.]]></Description><Summary><![CDATA[Converts the any to a Value object. The any will be set as the value of the Value.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Value"/><Parameters><Parameter name="a" type="any"/></Parameters></Action><Action name="valueToBoolean" sortKey="static-0-valueToBoolean" staticNature="static "><Description><![CDATA[Converts the value to a boolean. In this case, for a string, the contents of the string are parsed and converted rather than the string type itself.]]></Description><Summary><![CDATA[Converts the value to a boolean. In this case, for a string, the contents of the string are parsed and converted rather than the string type itself.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="a" type="any"/></Parameters></Action><Action name="valueToFloat" sortKey="static-0-valueToFloat" staticNature="static "><Description><![CDATA[Converts the value to a float. In this case, for a string, the contents of the string are parsed and converted rather than the string type itself. Invalid values will cause an exception to be thrown.]]></Description><Summary><![CDATA[Converts the value to a float. In this case, for a string, the contents of the string are parsed and converted rather than the string type itself. Invalid values will cause an exception to be thrown.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/><Parameters><Parameter name="a" type="any"/></Parameters></Action><Action name="valueToFloatSafe" sortKey="static-0-valueToFloatSafe" staticNature="static "><Description><![CDATA[Converts the value to a float. In this case, for a string, the contents of the string are parsed and converted rather than the string type itself. Invalid values will result in float.NaN.]]></Description><Summary><![CDATA[Converts the value to a float. In this case, for a string, the contents of the string are parsed and converted rather than the string type itself. Invalid values will result in float.NaN.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/><Parameters><Parameter name="a" type="any"/></Parameters></Action><Action name="valueToString" sortKey="static-0-valueToString" staticNature="static "><Description><![CDATA[Converts the value of an any to a string. This mimics the any.valueToString() with the exception that an empty any results in an empty string rather than "empty".]]></Description><Summary><![CDATA[Converts the value of an any to a string. This mimics the any.valueToString() with the exception that an empty any results in an empty string rather than "empty".]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="a" type="any"/></Parameters></Action></Type><Type category="Event" name="UpdateForeignInputs"><Description><![CDATA[Used to notify forwarders about foreign inputs.]]></Description><Summary><![CDATA[Used to notify forwarders about foreign inputs.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="CHANNEL" type="string" typeValue="&quot;analyticsbuilder.inputforwarder&quot;"><TypeParameters/></Member><Member name="foreignInputs" type="dictionary"><Parameters><Parameter package="apama.analyticsbuilder" type="EventPartition"/><Parameter type="sequence"><Parameters><Parameter type="integer"/></Parameters></Parameter></Parameters><TypeParameters/></Member></Type><Type category="Event" name="Value"><Description><![CDATA[The value with extra properties.]]></Description><Summary><![CDATA[The value with extra properties.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="value" type="any"><Description><![CDATA[The primary value.

 This should typically be a string, float or boolean.  A value wire can be connected to a simple input, and only this value will be used.]]></Description><Summary><![CDATA[The primary value.]]></Summary><TypeParameters/></Member><Member name="timestamp" type="float"><Description><![CDATA[The time of the signal.]]></Description><Summary><![CDATA[The time of the signal.]]></Summary><TypeParameters/></Member><Member name="properties" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[Extra properties associated with the <tt>value</tt>.]]></Description><Summary><![CDATA[Extra properties associated with the <tt>value</tt>.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Wire" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="sourceBlockId" private="true" type="string"><Description><![CDATA[The ID of the source block.]]></Description><Summary><![CDATA[The ID of the source block.]]></Summary><TypeParameters/></Member><Member name="sourceOutputName" private="true" type="string"><Description><![CDATA[The name of the output of the source block.]]></Description><Summary><![CDATA[The name of the output of the source block.]]></Summary><TypeParameters/></Member><Member name="targetBlockId" private="true" type="string"><Description><![CDATA[The ID of the target block.]]></Description><Summary><![CDATA[The ID of the target block.]]></Summary><TypeParameters/></Member><Member name="targetInputName" private="true" type="string"><Description><![CDATA[The name of the input of the target block.]]></Description><Summary><![CDATA[The name of the input of the target block.]]></Summary><TypeParameters/></Member></Type><Type category="Monitor" name="BlockCatalogRegistry" private="true"><Description><![CDATA[Repository of the block catalog information.

 Stores a copy of all block information as it is registered, and responds to get requests either from HTTP connectivity or internal apps.]]></Description><Summary><![CDATA[Repository of the block catalog information.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/></Type><Type category="Monitor" name="GenericForwarder" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends><Reference type="any"/></Sends><Listens><Reference package="apama.analyticsbuilder" type="RequestForwarding"/><Reference package="apama.analyticsbuilder" type="UpdateForeignInputs"/><Reference type="any"/></Listens></Type></Package></Packages>